{
  "address": "0x9f8380f152E7cfeb93D2e42Ff347f2C98bC655A4",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "planetSize",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasRings",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "numMoons",
              "type": "uint256"
            },
            {
              "internalType": "enum PlanetType",
              "name": "planetType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "hue",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasWater",
              "type": "bool"
            },
            {
              "internalType": "bytes[7]",
              "name": "vars",
              "type": "bytes[7]"
            }
          ],
          "internalType": "struct Settings",
          "name": "_settings",
          "type": "tuple"
        }
      ],
      "name": "buildThumbnail",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0f32f156f607a7e491f9db482758a32da8e510f783aa825737372b56ab098e2",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0x9f8380f152E7cfeb93D2e42Ff347f2C98bC655A4",
    "transactionIndex": 60,
    "gasUsed": "1873263",
    "logsBloom": "0x
    "blockHash": "0x80e14b39c2bf0cebea249ec64b053a45cd24572d77c235c82ad6362d99274cb3",
    "transactionHash": "0xe0f32f156f607a7e491f9db482758a32da8e510f783aa825737372b56ab098e2",
    "logs": [],
    "blockNumber": 8808411,
    "cumulativeGasUsed": "7034906",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4ddda4e188f8b96f8f2fd106a7655699",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasRings\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numMoons\",\"type\":\"uint256\"},{\"internalType\":\"enum PlanetType\",\"name\":\"planetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"hue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasWater\",\"type\":\"bool\"},{\"internalType\":\"bytes[7]\",\"name\":\"vars\",\"type\":\"bytes[7]\"}],\"internalType\":\"struct Settings\",\"name\":\"_settings\",\"type\":\"tuple\"}],\"name\":\"buildThumbnail\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buildThumbnail((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))\":{\"params\":{\"_settings\":\"- Track settings struct\"},\"returns\":{\"_0\":\"final svg as bytes\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buildThumbnail((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))\":{\"notice\":\"Build the SVG thumbnail\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PlanetsThumbnail.sol\":\"PlanetsThumbnail\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PlanetsThumbnail.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/IPlanets.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\ncontract PlanetsThumbnail {\\n  uint256 private constant CANVAS_SIZE = 500;\\n  bytes private constant BACKGROUND =\\n    '<g fill=\\\"#fff\\\"><circle cx=\\\"50\\\" cy=\\\"100\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"200\\\" cy=\\\"150\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"300\\\" cy=\\\"250\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"400\\\" cy=\\\"75\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"175\\\" cy=\\\"200\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"450\\\" cy=\\\"350\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"125\\\" cy=\\\"400\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"375\\\" cy=\\\"300\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"225\\\" cy=\\\"375\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"75\\\" cy=\\\"250\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/></g>';\\n  bytes private constant PLANET =\\n    '<path class=\\\"rings\\\" stroke-width=\\\"8.686\\\" d=\\\"M149.379 79.264c0-5.756-32.406-10.423-72.38-10.423-39.976 0-72.382 4.667-72.382 10.423\\\"/><ellipse cx=\\\"76.713\\\" cy=\\\"69.999\\\" class=\\\"body\\\" rx=\\\"50.088\\\" ry=\\\"49.798\\\"/><mask id=\\\"a\\\" width=\\\"101\\\" height=\\\"102\\\" x=\\\"26\\\" y=\\\"19\\\" maskUnits=\\\"userSpaceOnUse\\\" style=\\\"mask-type:alpha\\\"><circle cx=\\\"76.515\\\" cy=\\\"70\\\" r=\\\"50\\\" fill=\\\"#AC0000\\\" transform=\\\"rotate(-33.909 76.515 70)\\\"/></mask><g mask=\\\"url(#a)\\\"><path class=\\\"water\\\" d=\\\"M84.845 48.333c.476-2.063 2.428-8.047 6.428-15.476 3.049-1.905 10.795-3.016 14.287-3.333h14.048l15 25-8.81 24.285h-.714c-.571.572-2.143.556-2.857.477l-9.762-5.477a20.235 20.235 0 0 0-21.192-12.857c-12.952 1.143-9.682-7.936-6.428-12.619ZM34.137 66.904c-3.239-1.333-6.27 2.46-7.381 4.524l-2.858 1.429 2.143 23.095 25.477 20.953c1.587-1.826 5-6.381 5.952-10 1.19-4.524-3.333-7.858-6.905-9.286-3.571-1.429-1.905-8.572-.714-11.429 1.19-2.857-3.334-8.571-8.334-11.428-5-2.858-3.333-6.19-7.38-7.858Z\\\"/><path class=\\\"body-sec\\\" d=\\\"M72.5 100.5C67 93.5 80 89.5 78 84c1.334-1.167 5.2-4.4 10-8 6-4.5 19.5 0 23 4.5s-.5 11-3.5 20c-2.4 7.2-10 8-13.5 7.5-5.333-.167-17.1-1.9-21.5-7.5ZM44 70.5c0-2-2.6-8.2-13-17l-4.5-2 20-25.5c2.167 1.833 7.3 4.4 10.5 0 4-5.5 10.5.5 13 5.5S61.5 41 70 42s8 1 8 11.5S72.5 57 72.5 65s-9 11-17 11c-6.4 0-10.333-3.667-11.5-5.5Z\\\"/></g><path class=\\\"rings\\\" stroke-width=\\\"8.686\\\" d=\\\"M149.379 78.106c0 5.757-32.406 10.423-72.38 10.423-39.976 0-72.382-4.666-72.382-10.423\\\"/>';\\n\\n  string[3] private MOONS = [\\n    '<circle cx=\\\"22\\\" cy=\\\"171\\\" r=\\\"22\\\" fill=\\\"#BBBBBB\\\"/>',\\n    '<circle cx=\\\"370\\\" cy=\\\"106\\\" r=\\\"16\\\" fill=\\\"#BBBBBB\\\"/>',\\n    '<circle cx=\\\"30\\\" cy=\\\"11\\\" r=\\\"11\\\" fill=\\\"#BBBBBB\\\"/>'\\n  ];\\n\\n  function getPlanet(uint256 planetSize) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<g transform-origin=\\\"72 60\\\" transform=\\\"translate(-26,-20),translate(200,200),scale(',\\n          utils.uint2floatstr((planetSize * 1e3) / 40, 3),\\n          ')\\\">',\\n          PLANET,\\n          \\\"</g>\\\"\\n        )\\n      );\\n  }\\n\\n  function getMoons(uint256 numMoons) internal view returns (bytes memory) {\\n    bytes memory moons = '<g transform=\\\"translate(50,170)\\\">';\\n    for (uint256 i = 0; i < numMoons; i++) {\\n      moons = abi.encodePacked(moons, MOONS[i]);\\n    }\\n    moons = abi.encodePacked(moons, \\\"</g>\\\");\\n    return moons;\\n  }\\n\\n  /**\\n   * @notice Build the SVG thumbnail\\n   * @param _settings - Track settings struct\\n   * @return final svg as bytes\\n   */\\n  function buildThumbnail(Settings calldata _settings) external view returns (bytes memory) {\\n    bytes memory svg = abi.encodePacked(\\n      '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 ',\\n      utils.uint2str(CANVAS_SIZE),\\n      \\\" \\\",\\n      utils.uint2str(CANVAS_SIZE),\\n      '\\\" width=\\\"500\\\" height=\\\"500\\\" fill=\\\"none\\\">',\\n      // \\\"<defs><style>.rings{stroke:\\\",\\n      // _settings.hasRings ? getHSL(_settings.hue, 100, 15) : \\\"none\\\",\\n      // \\\";}.body{fill:\\\",\\n      // getHSL(_settings.hue, 70, 34),\\n      // \\\";}.water{fill:\\\",\\n      // _settings.planetType == PlanetType.SOLID ? \\\"#2680D9\\\" : \\\"none\\\",\\n      // \\\";}</style></defs>\\\",\\n      \\\"<defs><style>\\\",\\n      \\\".rings { stroke: \\\",\\n      _settings.hasRings ? utils.getHSL(_settings.hue, 100, 15) : \\\"none\\\",\\n      \\\"; }\\\",\\n      \\\".body { fill: \\\",\\n      utils.getHSL(_settings.hue, 60, 40),\\n      \\\"; }\\\",\\n      \\\".body-sec { fill: \\\",\\n      _settings.planetType == PlanetType.SOLID ? utils.getHSL((_settings.hue + 5) % 360, 45, 50) : \\\"none\\\",\\n      \\\"; }\\\",\\n      \\\".water { fill: \\\",\\n      _settings.hasWater ? \\\"#2680D9\\\" : \\\"none\\\",\\n      \\\"; }\\\",\\n      \\\"</style></defs>\\\",\\n      '<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"',\\n      utils.uint2str(CANVAS_SIZE),\\n      '\\\" height=\\\"',\\n      utils.uint2str(CANVAS_SIZE),\\n      '\\\" fill=\\\"#000000\\\"/>',\\n      BACKGROUND,\\n      getPlanet(_settings.planetSize),\\n      getMoons(_settings.numMoons),\\n      '<g transform=\\\"translate(440,470)\\\"><text x=\\\"13\\\" y=\\\"0\\\" fill=\\\"#fff\\\" font-size=\\\"24\\\" font-family=\\\"Helvetica\\\">2D</text><text x=\\\"13\\\" y=\\\"15\\\" fill=\\\"#fff\\\" font-size=\\\"12\\\" font-family=\\\"Helvetica\\\">VIEW</text></g></svg>'\\n    );\\n\\n    return svg;\\n  }\\n}\\n\",\"keccak256\":\"0x544e1673b37fdc0524b4e3bf2ed2b5048f7ec606f5852319df00284776db5db6\",\"license\":\"MIT\"},\"contracts/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nlibrary utils {\\n  function getColorName(uint256 _hue) public pure returns (string memory) {\\n    string[12] memory colorNames = [\\n      \\\"Red\\\",\\n      \\\"Orange\\\",\\n      \\\"Yellow\\\",\\n      \\\"Chartreuse\\\",\\n      \\\"Green\\\",\\n      \\\"Spring\\\",\\n      \\\"Cyan\\\",\\n      \\\"Azure\\\",\\n      \\\"Blue\\\",\\n      \\\"Violet\\\",\\n      \\\"Magenta\\\",\\n      \\\"Rose\\\"\\n    ];\\n\\n    require(_hue <= 360, \\\"Hue must be between 0 and 360\\\");\\n\\n    uint256 colorIndex = (_hue * 12) / 360;\\n    return colorNames[colorIndex];\\n  }\\n\\n  function getHSL(uint256 hue, uint256 saturation, uint256 lightness) internal pure returns (string memory) {\\n    return\\n      string.concat(\\n        \\\"hsl(\\\",\\n        utils.uint2str(hue),\\n        \\\", \\\",\\n        utils.uint2str(saturation),\\n        \\\"%, \\\",\\n        utils.uint2str(lightness),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function assemblyKeccak(bytes memory _input) public pure returns (bytes32 x) {\\n    assembly {\\n      x := keccak256(add(_input, 0x20), mload(_input))\\n    }\\n  }\\n\\n  function random(string memory input) internal pure returns (uint256) {\\n    return uint256(assemblyKeccak(abi.encodePacked(input)));\\n  }\\n\\n  function randomRange(\\n    uint256 tokenId,\\n    string memory keyPrefix,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256) {\\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\\n    return (rand % (upper - lower + 1)) + lower;\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    require(bs.length >= start + 32, \\\"slicing out of range\\\");\\n    uint256 x;\\n    assembly {\\n      x := mload(add(bs, add(0x20, start)))\\n    }\\n    return x;\\n  }\\n\\n  function int2str(int256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i < 0) {\\n      return string.concat(\\\"-\\\", uint2str(uint256(-_i)));\\n    } else {\\n      return uint2str(uint256(_i));\\n    }\\n  }\\n\\n  function uint2floatstr(uint256 _i_scaled, uint256 _decimals) internal pure returns (string memory) {\\n    return string.concat(uint2str(_i_scaled / (10 ** _decimals)), \\\".\\\", uint2str(_i_scaled % (10 ** _decimals)));\\n  }\\n\\n  // converts an unsigned integer to a string from Solady (https://github.com/vectorized/solady/blob/main/src)\\n  /// @dev Returns the base 10 decimal representation of `value`.\\n  function uint2str(uint256 value) internal pure returns (string memory str) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n      // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n      // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n      // and 3 words for a maximum of 78 digits.\\n      str := add(mload(0x40), 0x80)\\n      // Update the free memory pointer to allocate.\\n      mstore(0x40, add(str, 0x20))\\n      // Zeroize the slot after the string.\\n      mstore(str, 0)\\n\\n      // Cache the end of the memory to calculate the length later.\\n      let end := str\\n\\n      let w := not(0) // Tsk.\\n      // We write the string from rightmost digit to leftmost digit.\\n      // The following is essentially a do-while loop that also handles the zero case.\\n      for {\\n        let temp := value\\n      } 1 {\\n\\n      } {\\n        str := add(str, w) // `sub(str, 1)`.\\n        // Write the character to the pointer.\\n        // The ASCII index of the '0' character is 48.\\n        mstore8(str, add(48, mod(temp, 10)))\\n        // Keep dividing `temp` until zero.\\n        temp := div(temp, 10)\\n        if iszero(temp) {\\n          break\\n        }\\n      }\\n\\n      let length := sub(end, str)\\n      // Move the pointer 32 bytes leftwards to make room for the length.\\n      str := sub(str, 0x20)\\n      // Store the length.\\n      mstore(str, length)\\n    }\\n  }\\n\\n  /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n  /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n  /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n  /// @param noPadding Whether to strip away the padding.\\n  function encode(bytes memory data, bool fileSafe, bool noPadding) internal pure returns (string memory result) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      let dataLength := mload(data)\\n\\n      if dataLength {\\n        // Multiply by 4/3 rounded up.\\n        // The `shl(2, ...)` is equivalent to multiplying by 4.\\n        let encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n        // Set `result` to point to the start of the free memory.\\n        result := mload(0x40)\\n\\n        // Store the table into the scratch space.\\n        // Offsetted by -1 byte so that the `mload` will load the character.\\n        // We will rewrite the free memory pointer at `0x40` later with\\n        // the allocated size.\\n        // The magic constant 0x0230 will translate \\\"-_\\\" + \\\"+/\\\".\\n        mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n        mstore(0x3f, sub(\\\"ghijklmnopqrstuvwxyz0123456789-_\\\", mul(iszero(fileSafe), 0x0230)))\\n\\n        // Skip the first slot, which stores the length.\\n        let ptr := add(result, 0x20)\\n        let end := add(ptr, encodedLength)\\n\\n        // Run over the input, 3 bytes at a time.\\n        for {\\n\\n        } 1 {\\n\\n        } {\\n          data := add(data, 3) // Advance 3 bytes.\\n          let input := mload(data)\\n\\n          // Write 4 bytes. Optimized for fewer stack operations.\\n          mstore8(0, mload(and(shr(18, input), 0x3F)))\\n          mstore8(1, mload(and(shr(12, input), 0x3F)))\\n          mstore8(2, mload(and(shr(6, input), 0x3F)))\\n          mstore8(3, mload(and(input, 0x3F)))\\n          mstore(ptr, mload(0x00))\\n\\n          ptr := add(ptr, 4) // Advance 4 bytes.\\n\\n          if iszero(lt(ptr, end)) {\\n            break\\n          }\\n        }\\n\\n        // Allocate the memory for the string.\\n        // Add 31 and mask with `not(31)` to round the\\n        // free memory pointer up the next multiple of 32.\\n        mstore(0x40, and(add(end, 31), not(31)))\\n\\n        // Equivalent to `o = [0, 2, 1][dataLength % 3]`.\\n        let o := div(2, mod(dataLength, 3))\\n\\n        // Offset `ptr` and pad with '='. We can simply write over the end.\\n        mstore(sub(ptr, o), shl(240, 0x3d3d))\\n        // Set `o` to zero if there is padding.\\n        o := mul(iszero(iszero(noPadding)), o)\\n        // Zeroize the slot after the string.\\n        mstore(sub(ptr, o), 0)\\n        // Write the length of the string.\\n        mstore(result, sub(encodedLength, o))\\n      }\\n    }\\n  }\\n\\n  /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n  /// Equivalent to `encode(data, false, false)`.\\n  function encode(bytes memory data) internal pure returns (string memory result) {\\n    result = encode(data, false, false);\\n  }\\n}\\n\",\"keccak256\":\"0x9cfa7d6aba0fabcacdc12fc0fead353c833154331b3d0feddf52210eb42e0fa8\",\"license\":\"MIT\"},\"contracts/interfaces/IPlanets.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nenum PlanetType {\\n  GAS,\\n  SOLID\\n}\\n\\nstruct Settings {\\n  uint256 seed;\\n  uint256 planetSize;\\n  bool hasRings;\\n  uint256 numMoons;\\n  PlanetType planetType;\\n  uint256 hue;\\n  bool hasWater;\\n  bytes[7] vars;\\n}\\n\",\"keccak256\":\"0xde247baaac85eaf9d393d7e8d22c19eb9eb61272cc00c9b01577b2dd97298685\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "libraries": {
    "utils": "0x833d32d05DdCaFCbd9483A03aD8a1a22F3160F3A"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buildThumbnail((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))": {
        "params": {
          "_settings": "- Track settings struct"
        },
        "returns": {
          "_0": "final svg as bytes"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buildThumbnail((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))": {
        "notice": "Build the SVG thumbnail"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 995,
        "contract": "contracts/PlanetsThumbnail.sol:PlanetsThumbnail",
        "label": "MOONS",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)3_storage"
      }
    ],
    "types": {
      "t_array(t_string_storage)3_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[3]",
        "numberOfBytes": "96"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}
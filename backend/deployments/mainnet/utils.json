{
  "address": "0x0e47A2B3de8c3dC9d7F11952164d73A0c1D9D5aC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_input",
          "type": "bytes"
        }
      ],
      "name": "assemblyKeccak",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hue",
          "type": "uint256"
        }
      ],
      "name": "getColorName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ce341e9e8c03e743310e95ec1036d65f085d5ffbcb3ed30c177691b987b3d00",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0x0e47A2B3de8c3dC9d7F11952164d73A0c1D9D5aC",
    "transactionIndex": 187,
    "gasUsed": "523742",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x777c8b18b5bb48fa036058c8931c735a8c52c94b772c2b608ca120868e27f8b9",
    "transactionHash": "0x0ce341e9e8c03e743310e95ec1036d65f085d5ffbcb3ed30c177691b987b3d00",
    "logs": [],
    "blockNumber": 17024300,
    "cumulativeGasUsed": "9606550",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "98128eea7ffdee4216570b3dbfc8b11f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"}],\"name\":\"assemblyKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hue\",\"type\":\"uint256\"}],\"name\":\"getColorName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Utilities.sol\":\"utils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nlibrary utils {\\n  function getColorName(uint256 _hue) public pure returns (string memory) {\\n    string[12] memory colorNames = [\\n      \\\"Red\\\",\\n      \\\"Orange\\\",\\n      \\\"Yellow\\\",\\n      \\\"Chartreuse\\\",\\n      \\\"Green\\\",\\n      \\\"Spring\\\",\\n      \\\"Cyan\\\",\\n      \\\"Azure\\\",\\n      \\\"Blue\\\",\\n      \\\"Violet\\\",\\n      \\\"Magenta\\\",\\n      \\\"Rose\\\"\\n    ];\\n\\n    require(_hue <= 360, \\\"Hue must be between 0 and 360\\\");\\n\\n    uint256 colorIndex = (_hue * 12) / 360;\\n    return colorNames[colorIndex];\\n  }\\n\\n  function getHSL(uint256 hue, uint256 saturation, uint256 lightness) internal pure returns (string memory) {\\n    return\\n      string.concat(\\n        \\\"hsl(\\\",\\n        utils.uint2str(hue),\\n        \\\", \\\",\\n        utils.uint2str(saturation),\\n        \\\"%, \\\",\\n        utils.uint2str(lightness),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function assemblyKeccak(bytes memory _input) public pure returns (bytes32 x) {\\n    assembly {\\n      x := keccak256(add(_input, 0x20), mload(_input))\\n    }\\n  }\\n\\n  function random(string memory input) internal pure returns (uint256) {\\n    return uint256(assemblyKeccak(abi.encodePacked(input)));\\n  }\\n\\n  function randomRange(\\n    uint256 tokenId,\\n    string memory keyPrefix,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256) {\\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\\n    return (rand % (upper - lower + 1)) + lower;\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    require(bs.length >= start + 32, \\\"slicing out of range\\\");\\n    uint256 x;\\n    assembly {\\n      x := mload(add(bs, add(0x20, start)))\\n    }\\n    return x;\\n  }\\n\\n  function int2str(int256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i < 0) {\\n      return string.concat(\\\"-\\\", uint2str(uint256(-_i)));\\n    } else {\\n      return uint2str(uint256(_i));\\n    }\\n  }\\n\\n  function uint2floatstr(uint256 _i_scaled, uint256 _decimals) internal pure returns (string memory) {\\n    return string.concat(uint2str(_i_scaled / (10 ** _decimals)), \\\".\\\", uint2str(_i_scaled % (10 ** _decimals)));\\n  }\\n\\n  // converts an unsigned integer to a string from Solady (https://github.com/vectorized/solady/blob/main/src)\\n  /// @dev Returns the base 10 decimal representation of `value`.\\n  function uint2str(uint256 value) internal pure returns (string memory str) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n      // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n      // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n      // and 3 words for a maximum of 78 digits.\\n      str := add(mload(0x40), 0x80)\\n      // Update the free memory pointer to allocate.\\n      mstore(0x40, add(str, 0x20))\\n      // Zeroize the slot after the string.\\n      mstore(str, 0)\\n\\n      // Cache the end of the memory to calculate the length later.\\n      let end := str\\n\\n      let w := not(0) // Tsk.\\n      // We write the string from rightmost digit to leftmost digit.\\n      // The following is essentially a do-while loop that also handles the zero case.\\n      for {\\n        let temp := value\\n      } 1 {\\n\\n      } {\\n        str := add(str, w) // `sub(str, 1)`.\\n        // Write the character to the pointer.\\n        // The ASCII index of the '0' character is 48.\\n        mstore8(str, add(48, mod(temp, 10)))\\n        // Keep dividing `temp` until zero.\\n        temp := div(temp, 10)\\n        if iszero(temp) {\\n          break\\n        }\\n      }\\n\\n      let length := sub(end, str)\\n      // Move the pointer 32 bytes leftwards to make room for the length.\\n      str := sub(str, 0x20)\\n      // Store the length.\\n      mstore(str, length)\\n    }\\n  }\\n\\n  /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n  /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n  /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n  /// @param noPadding Whether to strip away the padding.\\n  function encode(bytes memory data, bool fileSafe, bool noPadding) internal pure returns (string memory result) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      let dataLength := mload(data)\\n\\n      if dataLength {\\n        // Multiply by 4/3 rounded up.\\n        // The `shl(2, ...)` is equivalent to multiplying by 4.\\n        let encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n        // Set `result` to point to the start of the free memory.\\n        result := mload(0x40)\\n\\n        // Store the table into the scratch space.\\n        // Offsetted by -1 byte so that the `mload` will load the character.\\n        // We will rewrite the free memory pointer at `0x40` later with\\n        // the allocated size.\\n        // The magic constant 0x0230 will translate \\\"-_\\\" + \\\"+/\\\".\\n        mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n        mstore(0x3f, sub(\\\"ghijklmnopqrstuvwxyz0123456789-_\\\", mul(iszero(fileSafe), 0x0230)))\\n\\n        // Skip the first slot, which stores the length.\\n        let ptr := add(result, 0x20)\\n        let end := add(ptr, encodedLength)\\n\\n        // Run over the input, 3 bytes at a time.\\n        for {\\n\\n        } 1 {\\n\\n        } {\\n          data := add(data, 3) // Advance 3 bytes.\\n          let input := mload(data)\\n\\n          // Write 4 bytes. Optimized for fewer stack operations.\\n          mstore8(0, mload(and(shr(18, input), 0x3F)))\\n          mstore8(1, mload(and(shr(12, input), 0x3F)))\\n          mstore8(2, mload(and(shr(6, input), 0x3F)))\\n          mstore8(3, mload(and(input, 0x3F)))\\n          mstore(ptr, mload(0x00))\\n\\n          ptr := add(ptr, 4) // Advance 4 bytes.\\n\\n          if iszero(lt(ptr, end)) {\\n            break\\n          }\\n        }\\n\\n        // Allocate the memory for the string.\\n        // Add 31 and mask with `not(31)` to round the\\n        // free memory pointer up the next multiple of 32.\\n        mstore(0x40, and(add(end, 31), not(31)))\\n\\n        // Equivalent to `o = [0, 2, 1][dataLength % 3]`.\\n        let o := div(2, mod(dataLength, 3))\\n\\n        // Offset `ptr` and pad with '='. We can simply write over the end.\\n        mstore(sub(ptr, o), shl(240, 0x3d3d))\\n        // Set `o` to zero if there is padding.\\n        o := mul(iszero(iszero(noPadding)), o)\\n        // Zeroize the slot after the string.\\n        mstore(sub(ptr, o), 0)\\n        // Write the length of the string.\\n        mstore(result, sub(encodedLength, o))\\n      }\\n    }\\n  }\\n\\n  /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n  /// Equivalent to `encode(data, false, false)`.\\n  function encode(bytes memory data) internal pure returns (string memory result) {\\n    result = encode(data, false, false);\\n  }\\n}\\n\",\"keccak256\":\"0x9cfa7d6aba0fabcacdc12fc0fead353c833154331b3d0feddf52210eb42e0fa8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61089b610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630d56fe8714610045578063ad4f5fd414610075575b600080fd5b61005f600480360381019061005a9190610457565b6100a5565b60405161006c9190610514565b60405180910390f35b61008f600480360381019061008a919061066b565b6103fd565b60405161009c91906106cd565b60405180910390f35b606060006040518061018001604052806040518060400160405280600381526020017f526564000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f4f72616e6765000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f59656c6c6f77000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600a81526020017f436861727472657573650000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f477265656e00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f537072696e67000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f4379616e0000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f417a75726500000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f426c75650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f56696f6c6574000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f4d6167656e74610000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f526f73650000000000000000000000000000000000000000000000000000000081525081525090506101688311156103be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b590610745565b60405180910390fd5b6000610168600c856103d09190610794565b6103da9190610805565b90508181600c81106103ef576103ee610836565b5b602002015192505050919050565b6000815160208301209050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61043481610421565b811461043f57600080fd5b50565b6000813590506104518161042b565b92915050565b60006020828403121561046d5761046c610417565b5b600061047b84828501610442565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104be5780820151818401526020810190506104a3565b60008484015250505050565b6000601f19601f8301169050919050565b60006104e682610484565b6104f0818561048f565b93506105008185602086016104a0565b610509816104ca565b840191505092915050565b6000602082019050818103600083015261052e81846104db565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610578826104ca565b810181811067ffffffffffffffff8211171561059757610596610540565b5b80604052505050565b60006105aa61040d565b90506105b6828261056f565b919050565b600067ffffffffffffffff8211156105d6576105d5610540565b5b6105df826104ca565b9050602081019050919050565b82818337600083830152505050565b600061060e610609846105bb565b6105a0565b90508281526020810184848401111561062a5761062961053b565b5b6106358482856105ec565b509392505050565b600082601f83011261065257610651610536565b5b81356106628482602086016105fb565b91505092915050565b60006020828403121561068157610680610417565b5b600082013567ffffffffffffffff81111561069f5761069e61041c565b5b6106ab8482850161063d565b91505092915050565b6000819050919050565b6106c7816106b4565b82525050565b60006020820190506106e260008301846106be565b92915050565b600082825260208201905092915050565b7f487565206d757374206265206265747765656e203020616e6420333630000000600082015250565b600061072f601d836106e8565b915061073a826106f9565b602082019050919050565b6000602082019050818103600083015261075e81610722565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061079f82610421565b91506107aa83610421565b92508282026107b881610421565b915082820484148315176107cf576107ce610765565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061081082610421565b915061081b83610421565b92508261082b5761082a6107d6565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212205665006e82df1cf78331bd83cb55b7179b4d1833c4c8db9ac8a0b9c6f7c9e69d64736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630d56fe8714610045578063ad4f5fd414610075575b600080fd5b61005f600480360381019061005a9190610457565b6100a5565b60405161006c9190610514565b60405180910390f35b61008f600480360381019061008a919061066b565b6103fd565b60405161009c91906106cd565b60405180910390f35b606060006040518061018001604052806040518060400160405280600381526020017f526564000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f4f72616e6765000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f59656c6c6f77000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600a81526020017f436861727472657573650000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f477265656e00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f537072696e67000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f4379616e0000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f417a75726500000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f426c75650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f56696f6c6574000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600781526020017f4d6167656e74610000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f526f73650000000000000000000000000000000000000000000000000000000081525081525090506101688311156103be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b590610745565b60405180910390fd5b6000610168600c856103d09190610794565b6103da9190610805565b90508181600c81106103ef576103ee610836565b5b602002015192505050919050565b6000815160208301209050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61043481610421565b811461043f57600080fd5b50565b6000813590506104518161042b565b92915050565b60006020828403121561046d5761046c610417565b5b600061047b84828501610442565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104be5780820151818401526020810190506104a3565b60008484015250505050565b6000601f19601f8301169050919050565b60006104e682610484565b6104f0818561048f565b93506105008185602086016104a0565b610509816104ca565b840191505092915050565b6000602082019050818103600083015261052e81846104db565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610578826104ca565b810181811067ffffffffffffffff8211171561059757610596610540565b5b80604052505050565b60006105aa61040d565b90506105b6828261056f565b919050565b600067ffffffffffffffff8211156105d6576105d5610540565b5b6105df826104ca565b9050602081019050919050565b82818337600083830152505050565b600061060e610609846105bb565b6105a0565b90508281526020810184848401111561062a5761062961053b565b5b6106358482856105ec565b509392505050565b600082601f83011261065257610651610536565b5b81356106628482602086016105fb565b91505092915050565b60006020828403121561068157610680610417565b5b600082013567ffffffffffffffff81111561069f5761069e61041c565b5b6106ab8482850161063d565b91505092915050565b6000819050919050565b6106c7816106b4565b82525050565b60006020820190506106e260008301846106be565b92915050565b600082825260208201905092915050565b7f487565206d757374206265206265747765656e203020616e6420333630000000600082015250565b600061072f601d836106e8565b915061073a826106f9565b602082019050919050565b6000602082019050818103600083015261075e81610722565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061079f82610421565b91506107aa83610421565b92508282026107b881610421565b915082820484148315176107cf576107ce610765565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061081082610421565b915061081b83610421565b92508261082b5761082a6107d6565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212205665006e82df1cf78331bd83cb55b7179b4d1833c4c8db9ac8a0b9c6f7c9e69d64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
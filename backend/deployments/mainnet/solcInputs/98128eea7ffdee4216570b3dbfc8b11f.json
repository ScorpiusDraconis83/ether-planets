{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Imports.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport \"scripty.sol/contracts/scripty/ScriptyStorage.sol\";\n\ncontract Imports {}\n"
    },
    "contracts/interfaces/IPlanets.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nenum PlanetType {\n  GAS,\n  SOLID\n}\n\nstruct Settings {\n  uint256 seed;\n  uint256 planetSize;\n  bool hasRings;\n  uint256 numMoons;\n  PlanetType planetType;\n  uint256 hue;\n  bool hasWater;\n  bytes[7] vars;\n}\n"
    },
    "contracts/interfaces/IPlanetsRenderer.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"scripty.sol/contracts/scripty/IScriptyBuilder.sol\";\nimport \"./IPlanets.sol\";\n\ninterface IPlanetsRenderer {\n  function buildAnimationURI(bytes calldata vars) external view returns (bytes memory html);\n}\n"
    },
    "contracts/Planets.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\n// ███████╗████████╗██╗░░██╗███████╗██████╗░  ██████╗░██╗░░░░░░█████╗░███╗░░██╗███████╗████████╗░██████╗\n// ██╔════╝╚══██╔══╝██║░░██║██╔════╝██╔══██╗  ██╔══██╗██║░░░░░██╔══██╗████╗░██║██╔════╝╚══██╔══╝██╔════╝\n// █████╗░░░░░██║░░░███████║█████╗░░██████╔╝  ██████╔╝██║░░░░░███████║██╔██╗██║█████╗░░░░░██║░░░╚█████╗░\n// ██╔══╝░░░░░██║░░░██╔══██║██╔══╝░░██╔══██╗  ██╔═══╝░██║░░░░░██╔══██║██║╚████║██╔══╝░░░░░██║░░░░╚═══██╗\n// ███████╗░░░██║░░░██║░░██║███████╗██║░░██║  ██║░░░░░███████╗██║░░██║██║░╚███║███████╗░░░██║░░░██████╔╝\n// ╚══════╝░░░╚═╝░░░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝  ╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝░░╚══╝╚══════╝░░░╚═╝░░░╚═════╝░\n\npragma solidity ^0.8.18;\n\nimport \"./PlanetsThumbnail.sol\";\nimport \"./Utilities.sol\";\nimport \"./interfaces/IPlanets.sol\";\nimport \"./interfaces/IPlanetsRenderer.sol\";\nimport \"scripty.sol/contracts/scripty/IScriptyBuilder.sol\";\nimport {ERC721A} from \"erc721a/contracts/ERC721A.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Planets is ERC721A, Ownable {\n  uint256 public immutable deployBlock;\n  uint256 public immutable supply;\n  address public thumbnailAddress;\n  address public rendererAddress;\n\n  uint256 public price;\n  bool public isOpen;\n\n  bool public finalized;\n\n  error MintClosed();\n  error SoldOut();\n  error InsufficientFunds();\n  error TokenDoesntExist();\n  error RefundFailed();\n  error Finalized();\n\n  constructor(\n    string memory name,\n    string memory symbol,\n    uint256 _supply,\n    uint256 _price,\n    address _thumbnailAddress,\n    address _rendererAddress\n  ) ERC721A(name, symbol) {\n    thumbnailAddress = _thumbnailAddress;\n    rendererAddress = _rendererAddress;\n\n    supply = _supply;\n    price = _price;\n\n    deployBlock = block.number;\n  }\n\n  /**\n   * @notice  Airdrops tokens to a list of recipients. Only callable by the contract owner.\n   * @param _recipients List of recipients to receive the airdrop.\n   * @param _quantity Quantity of tokens to airdrop to each recipient.\n   */\n  function airdrop(address[] calldata _recipients, uint256 _quantity) external payable onlyOwner {\n    if (totalMinted() + _recipients.length * _quantity > supply) revert SoldOut();\n    for (uint256 i = 0; i < _recipients.length; i++) {\n      _mint(_recipients[i], _quantity);\n    }\n  }\n\n  /**\n   * @notice Mints new tokens for the caller.\n   * @param _quantity Quantity of tokens to mint.\n   */\n  function mint(uint256 _quantity) public payable {\n    if (!isOpen) revert MintClosed();\n    if (totalMinted() + _quantity > supply) revert SoldOut();\n    if (msg.value < price * _quantity) revert InsufficientFunds();\n\n    _mint(msg.sender, _quantity);\n\n    // Refund any extra ETH sent\n    if (msg.value > price * _quantity) {\n      (bool status, ) = payable(msg.sender).call{value: msg.value - price * _quantity}(\"\");\n      if (!status) revert RefundFailed();\n    }\n  }\n\n  /**\n   * @notice Withdraws the contract's balance. Only callable by the contract owner.\n   */\n  function withdraw() external onlyOwner {\n    require(payable(msg.sender).send(address(this).balance));\n  }\n\n  /**\n   * @notice Update the mint price.\n   * @dev Very doubtful this gets used, but good to have\n   * @param _price - The new price.\n   */\n  function setPrice(uint256 _price) external onlyOwner {\n    price = _price;\n  }\n\n  /**\n   * @notice Update thumbnail contract address\n   * @param _thumbnailAddress - Address of the thumbnail contract.\n   */\n  function setThumbnailAddress(address _thumbnailAddress) external onlyOwner {\n    if (finalized) revert Finalized();\n    thumbnailAddress = _thumbnailAddress;\n  }\n\n  /**\n   * @notice Update renderer contract address\n   * @param _rendererAddress - Address of the renderer contract.\n   */\n  function setRendererAddress(address _rendererAddress) external onlyOwner {\n    if (finalized) revert Finalized();\n    rendererAddress = _rendererAddress;\n  }\n\n  /**\n   * @notice Open or close minting\n   * @param _state - Boolean state for being open or closed.\n   */\n  function setMintStatus(bool _state) external onlyOwner {\n    isOpen = _state;\n  }\n\n  function finalize() external onlyOwner {\n    finalized = true;\n  }\n\n  /**\n   * @notice Minting starts at token id #1\n   * @return Token id to start minting at\n   */\n  function _startTokenId() internal pure override returns (uint256) {\n    return 1;\n  }\n\n  /**\n   * @notice Retrieve how many tokens have been minted\n   * @return Total number of minted tokens\n   */\n  function totalMinted() public view returns (uint256) {\n    return _totalMinted();\n  }\n\n  function formatVar(bytes memory _name, uint256 _value) internal pure returns (bytes memory) {\n    return abi.encodePacked(\"var \", _name, \"=\", utils.uint2str(_value), \";\");\n  }\n\n  /**\n   * @notice Build all the settings into a struct\n   * @param _tokenId - Token ID for seed value\n   * @return settings - All settings as a struct\n   */\n  function buildSettings(uint256 _tokenId) public view returns (Settings memory settings) {\n    uint256 randomSeed = _tokenId + deployBlock;\n\n    settings.seed = utils.randomRange(randomSeed, \"seed\", 1, 1000000);\n    settings.vars[0] = formatVar(\"seed\", settings.seed);\n\n    settings.planetSize = utils.randomRange(randomSeed, \"planetSize\", 30, 100);\n    settings.vars[1] = formatVar(\"planetSize\", settings.planetSize);\n\n    // 40% gas, 60% rock\n    settings.planetType = utils.randomRange(randomSeed, \"planetType\", 0, 10) < 4 ? PlanetType.GAS : PlanetType.SOLID;\n    settings.vars[4] = formatVar(\"planetType\", uint256(settings.planetType));\n\n    // 30% of gaseous planets;\n    settings.hasRings = settings.planetType == PlanetType.GAS && utils.randomRange(randomSeed, \"hasRings\", 0, 10) < 3;\n    settings.vars[2] = formatVar(\"hasRings\", settings.hasRings ? 1 : 0);\n\n    {\n      // 25% 1 moon, 12% 2 moons, 3% 3 moons\n      uint256 observation = utils.randomRange(randomSeed, \"numMoons\", 0, 100);\n      if (observation < 25) settings.numMoons = 1;\n      else if (observation < 37) settings.numMoons = 2;\n      else if (observation < 40) settings.numMoons = 3;\n      else settings.numMoons = 0;\n      settings.vars[3] = formatVar(\"numMoons\", settings.numMoons);\n    }\n\n    settings.hue = utils.randomRange(randomSeed, \"baseHue\", 0, 360);\n    settings.vars[5] = formatVar(\"baseHue\", settings.hue);\n\n    // If rocky, 30% water\n    settings.hasWater = settings.planetType == PlanetType.SOLID && utils.randomRange(randomSeed, \"hasWater\", 0, 10) < 3;\n    settings.vars[6] = formatVar(\"hasWater\", settings.hasWater ? 1 : 0);\n\n    return settings;\n  }\n\n  /**\n   * @notice Util function to help build traits\n   * @param _key - Trait key as string\n   * @param _value - Trait value as string\n   * @return trait - object as string\n   */\n  function buildTraitString(string memory _key, string memory _value) internal pure returns (string memory trait) {\n    return string.concat('{\"trait_type\":\"', _key, '\",\"value\":\"', _value, '\"}');\n  }\n\n  /**\n   * @notice Util function to help build traits where value is continuous\n   * @param _key - Trait key as string\n   * @param _value - Trait value as string\n   * @return trait - object as string\n   */\n  function buildTraitNumber(string memory _key, string memory _value) internal pure returns (string memory trait) {\n    return string.concat('{\"trait_type\":\"', _key, '\",\"value\":', _value, \"}\");\n  }\n\n  /**\n   * @notice Build attributes for metadata\n   * @param settings - Track settings struct\n   * @return attr - array as a string\n   */\n  function buildAttributes(Settings memory settings) public pure returns (string memory attr) {\n    return\n      string.concat(\n        '\"attributes\": [',\n        buildTraitNumber(\"Planet Size\", utils.uint2str(settings.planetSize)),\n        \",\",\n        buildTraitString(\"Has Rings\", settings.hasRings ? \"Yes\" : \"No\"),\n        \",\",\n        buildTraitString(\"Has Water\", settings.hasWater ? \"Yes\" : \"No\"),\n        \",\",\n        buildTraitNumber(\"Number of Moons\", utils.uint2str(settings.numMoons)),\n        \",\",\n        buildTraitString(\"Planet Type\", settings.planetType == PlanetType.SOLID ? \"Rock\" : \"Gas\"),\n        \",\",\n        buildTraitString(\"Planet Color\", utils.getColorName(settings.hue)),\n        \"]\"\n      );\n  }\n\n  /**\n   * @notice Pack and base64 encode JS compatible vars\n   * @param settings - Track settings struct\n   * @return vars - base64 encoded JS compatible setting variables\n   */\n  function buildVars(Settings memory settings) public pure returns (bytes memory vars) {\n    return\n      bytes(\n        utils.encode(\n          abi.encodePacked(\n            settings.vars[0],\n            settings.vars[1],\n            settings.vars[2],\n            settings.vars[3],\n            settings.vars[4],\n            settings.vars[5],\n            settings.vars[6]\n          )\n        )\n      );\n  }\n\n  /**\n   * @notice Build the metadata including the full render html for the coaster\n   * @dev This depends on\n   *      - https://ethfs.xyz/ [stores code libraries]\n   *      - https://github.com/intartnft/scripty.sol [builds rendering html and stores code libraries]\n   * @param _tokenId - TokenId to build coaster for\n   * @return metadata - as string\n   */\n  function tokenURI(uint256 _tokenId) public view virtual override(ERC721A) returns (string memory metadata) {\n    // show nothing if token doesnt exist\n    if (!_exists(_tokenId)) revert TokenDoesntExist();\n\n    // Generate all the settings and various objects for the metadata\n    Settings memory settings = buildSettings(_tokenId);\n    string memory attr = buildAttributes(settings);\n    bytes memory vars = buildVars(settings);\n    string memory thumbnail = utils.encode(PlanetsThumbnail(thumbnailAddress).buildThumbnail(settings));\n\n    bytes memory animationUri = IPlanetsRenderer(rendererAddress).buildAnimationURI(vars);\n\n    bytes memory json = abi.encodePacked(\n      '{\"name\":\"',\n      \"EtherPlanet #\",\n      utils.uint2str(_tokenId),\n      '\", \"description\":\"',\n      \"Fully on-chain, procedurally generated, 3D planets.\",\n      '\",\"image\":\"data:image/svg+xml;base64,',\n      thumbnail,\n      '\",\"animation_url\":\"',\n      animationUri,\n      '\",',\n      attr,\n      \"}\"\n    );\n\n    return string(abi.encodePacked(\"data:application/json,\", json));\n  }\n}\n"
    },
    "contracts/PlanetsRenderer.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport \"./interfaces/IPlanetsRenderer.sol\";\nimport \"./interfaces/IPlanets.sol\";\n\ncontract PlanetsRenderer is IPlanetsRenderer {\n  address public immutable ethfsFileStorageAddress;\n  address public immutable scriptyBuilderAddress;\n  address public immutable scriptyStorageAddress;\n\n  constructor(address _ethfsFileStorageAddress, address _scriptyBuilderAddress, address _scriptyStorageAddress) {\n    ethfsFileStorageAddress = _ethfsFileStorageAddress;\n    scriptyBuilderAddress = _scriptyBuilderAddress;\n    scriptyStorageAddress = _scriptyStorageAddress;\n  }\n\n  /**\n   * @notice Use Scripty to generate the final html\n   * @dev I opted for the lazy dev approach and let scripty calculate the required buffersize\n   *      This could be calculated and passed to the contract at any point prior to its use\n   *      in `getHTMLWrappedURLSafe`\n   * @param _vars - Variables to be injected\n   * @return html - as bytes\n   */\n  function buildAnimationURI(bytes calldata _vars) external view returns (bytes memory html) {\n    // To build the html I use Scripty to manage all the annoying tagging and html construction\n    // A combination of EthFS and Scripty is used for storage and this array stores the required\n    // code data\n    WrappedScriptRequest[] memory requests = new WrappedScriptRequest[](5);\n\n    // Step 1.\n    // - create custom content blocks that have no wrapper\n    // - we do this to easily inject css and dom elements\n    // - double urlencoded\n    // - first block is css + some JS\n    // - second block is coaster settings [biome + speed]\n    //\n    // Final Output:\n    // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L648\n    // [double urlencoded data]\n\n    requests[0].wrapType = 4;\n    requests[0]\n      .scriptContent = \"%253Cstyle%253E%250A%2520%2520body%252C%250A%2520%2520html%2520%257B%250A%2520%2520%2520%2520overflow%253A%2520hidden%253B%250A%2520%2520%2520%2520margin%253A%25200%253B%250A%2520%2520%2520%2520width%253A%2520100%2525%253B%250A%2520%2520%2520%2520height%253A%2520100%2525%253B%250A%2520%2520%257D%250A%2520%2520body%2520%257B%250A%2520%2520%2520%2520background-color%253A%2520black%253B%250A%2520%2520%257D%250A%253C%252Fstyle%253E\";\n\n    // Step 2.\n    // - wrap the JS variables in <script>\n    // - no name is needed as we are injected the code rather than\n    //   pulling it from a contract (scriptyStorage/EthFS)\n    // - wrapType 1 w/ script content\n    //\n    //\n    // Final Output:\n    // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L638\n    // <script src=\"data:text/javascript;base64,[vars]\"></script>\n\n    requests[1].name = \"\";\n    requests[1].wrapType = 1;\n    requests[1].scriptContent = _vars;\n\n    // Step 3.\n    // - pull the gzipped p5 lib from EthFS\n    // - wrapType 2 will handle the gzip script wrappers\n    //\n    // Final Output:\n    // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L642\n    // <script type=\"text/javascript+gzip\" src=\"data:text/javascript;base64,[p5-v1.5.0.min.js.gz]\"></script>\n\n    requests[2].name = \"p5-v1.5.0.min.js.gz\";\n    requests[2].wrapType = 2;\n    requests[2].contractAddress = ethfsFileStorageAddress;\n\n    // Step 4.\n    // - pull the coaster code from scriptyStorage\n    //   I could have stored on EthFS, but wanted to show that pulling from\n    //   another contract is possible.\n    // - wrapType 2 will handle the gzip script wrappers\n    //\n    // Final Output:\n    // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L642\n    // <script type=\"text/javascript+gzip\" src=\"data:text/javascript;base64,[cryptoCoaster.min.js.gz]\"></script>\n\n    requests[3].name = \"etherplanets-v1\";\n    requests[3].wrapType = 2;\n    requests[3].contractAddress = scriptyStorageAddress;\n\n    // Step 4.\n    // - pull the gunzip handler from EthFS\n    // - wrapType 1 will handle the script tags\n    //\n    // Final Output:\n    // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L638\n    // <script src=\"data:text/javascript;base64,[gunzipScripts-0.0.1.js]\"></script>\n\n    requests[4].name = \"gunzipScripts-0.0.1.js\";\n    requests[4].wrapType = 1;\n    requests[4].contractAddress = ethfsFileStorageAddress;\n\n    IScriptyBuilder IScriptyBuilder_ = IScriptyBuilder(scriptyBuilderAddress);\n    uint256 bufferSize = IScriptyBuilder_.getBufferSizeForURLSafeHTMLWrapped(requests);\n    return IScriptyBuilder_.getHTMLWrappedURLSafe(requests, bufferSize);\n  }\n}\n"
    },
    "contracts/PlanetsThumbnail.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport \"./interfaces/IPlanets.sol\";\nimport \"./Utilities.sol\";\n\ncontract PlanetsThumbnail {\n  uint256 private constant CANVAS_SIZE = 500;\n  bytes private constant BACKGROUND =\n    '<g fill=\"#fff\"><circle cx=\"50\" cy=\"100\" r=\"2\" fill=\"#fff\"/><circle cx=\"200\" cy=\"150\" r=\"2\" fill=\"#fff\"/><circle cx=\"300\" cy=\"250\" r=\"2\" fill=\"#fff\"/><circle cx=\"400\" cy=\"75\" r=\"2\" fill=\"#fff\"/><circle cx=\"175\" cy=\"200\" r=\"2\" fill=\"#fff\"/><circle cx=\"450\" cy=\"350\" r=\"2\" fill=\"#fff\"/><circle cx=\"125\" cy=\"400\" r=\"2\" fill=\"#fff\"/><circle cx=\"375\" cy=\"300\" r=\"2\" fill=\"#fff\"/><circle cx=\"225\" cy=\"375\" r=\"2\" fill=\"#fff\"/><circle cx=\"75\" cy=\"250\" r=\"2\" fill=\"#fff\"/><circle cx=\"25\" cy=\"25\" r=\"2\" fill=\"#fff\"/></g>';\n  bytes private constant PLANET =\n    '<path class=\"rings\" stroke-width=\"8.686\" d=\"M149.379 79.264c0-5.756-32.406-10.423-72.38-10.423-39.976 0-72.382 4.667-72.382 10.423\"/><ellipse cx=\"76.713\" cy=\"69.999\" class=\"body\" rx=\"50.088\" ry=\"49.798\"/><mask id=\"a\" width=\"101\" height=\"102\" x=\"26\" y=\"19\" maskUnits=\"userSpaceOnUse\" style=\"mask-type:alpha\"><circle cx=\"76.515\" cy=\"70\" r=\"50\" fill=\"#AC0000\" transform=\"rotate(-33.909 76.515 70)\"/></mask><g mask=\"url(#a)\"><path class=\"water\" d=\"M84.845 48.333c.476-2.063 2.428-8.047 6.428-15.476 3.049-1.905 10.795-3.016 14.287-3.333h14.048l15 25-8.81 24.285h-.714c-.571.572-2.143.556-2.857.477l-9.762-5.477a20.235 20.235 0 0 0-21.192-12.857c-12.952 1.143-9.682-7.936-6.428-12.619ZM34.137 66.904c-3.239-1.333-6.27 2.46-7.381 4.524l-2.858 1.429 2.143 23.095 25.477 20.953c1.587-1.826 5-6.381 5.952-10 1.19-4.524-3.333-7.858-6.905-9.286-3.571-1.429-1.905-8.572-.714-11.429 1.19-2.857-3.334-8.571-8.334-11.428-5-2.858-3.333-6.19-7.38-7.858Z\"/><path class=\"body-sec\" d=\"M72.5 100.5C67 93.5 80 89.5 78 84c1.334-1.167 5.2-4.4 10-8 6-4.5 19.5 0 23 4.5s-.5 11-3.5 20c-2.4 7.2-10 8-13.5 7.5-5.333-.167-17.1-1.9-21.5-7.5ZM44 70.5c0-2-2.6-8.2-13-17l-4.5-2 20-25.5c2.167 1.833 7.3 4.4 10.5 0 4-5.5 10.5.5 13 5.5S61.5 41 70 42s8 1 8 11.5S72.5 57 72.5 65s-9 11-17 11c-6.4 0-10.333-3.667-11.5-5.5Z\"/></g><path class=\"rings\" stroke-width=\"8.686\" d=\"M149.379 78.106c0 5.757-32.406 10.423-72.38 10.423-39.976 0-72.382-4.666-72.382-10.423\"/>';\n\n  string[3] private MOONS = [\n    '<circle cx=\"22\" cy=\"171\" r=\"22\" fill=\"#BBBBBB\"/>',\n    '<circle cx=\"370\" cy=\"106\" r=\"16\" fill=\"#BBBBBB\"/>',\n    '<circle cx=\"30\" cy=\"11\" r=\"11\" fill=\"#BBBBBB\"/>'\n  ];\n\n  function getPlanet(uint256 planetSize) internal pure returns (string memory) {\n    return\n      string(\n        abi.encodePacked(\n          '<g transform-origin=\"72 60\" transform=\"translate(-26,-20),translate(200,200),scale(',\n          utils.uint2floatstr((planetSize * 1e3) / 40, 3),\n          ')\">',\n          PLANET,\n          \"</g>\"\n        )\n      );\n  }\n\n  function getMoons(uint256 numMoons) internal view returns (bytes memory) {\n    bytes memory moons = '<g transform=\"translate(50,170)\">';\n    for (uint256 i = 0; i < numMoons; i++) {\n      moons = abi.encodePacked(moons, MOONS[i]);\n    }\n    moons = abi.encodePacked(moons, \"</g>\");\n    return moons;\n  }\n\n  /**\n   * @notice Build the SVG thumbnail\n   * @param _settings - Track settings struct\n   * @return final svg as bytes\n   */\n  function buildThumbnail(Settings calldata _settings) external view returns (bytes memory) {\n    bytes memory svg = abi.encodePacked(\n      '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ',\n      utils.uint2str(CANVAS_SIZE),\n      \" \",\n      utils.uint2str(CANVAS_SIZE),\n      '\" width=\"500\" height=\"500\" fill=\"none\">',\n      // \"<defs><style>.rings{stroke:\",\n      // _settings.hasRings ? getHSL(_settings.hue, 100, 15) : \"none\",\n      // \";}.body{fill:\",\n      // getHSL(_settings.hue, 70, 34),\n      // \";}.water{fill:\",\n      // _settings.planetType == PlanetType.SOLID ? \"#2680D9\" : \"none\",\n      // \";}</style></defs>\",\n      \"<defs><style>\",\n      \".rings { stroke: \",\n      _settings.hasRings ? utils.getHSL(_settings.hue, 100, 15) : \"none\",\n      \"; }\",\n      \".body { fill: \",\n      utils.getHSL(_settings.hue, 60, 40),\n      \"; }\",\n      \".body-sec { fill: \",\n      _settings.planetType == PlanetType.SOLID ? utils.getHSL((_settings.hue + 5) % 360, 45, 50) : \"none\",\n      \"; }\",\n      \".water { fill: \",\n      _settings.hasWater ? \"#2680D9\" : \"none\",\n      \"; }\",\n      \"</style></defs>\",\n      '<rect x=\"0\" y=\"0\" width=\"',\n      utils.uint2str(CANVAS_SIZE),\n      '\" height=\"',\n      utils.uint2str(CANVAS_SIZE),\n      '\" fill=\"#000000\"/>',\n      BACKGROUND,\n      getPlanet(_settings.planetSize),\n      getMoons(_settings.numMoons),\n      '<g transform=\"translate(440,470)\"><text x=\"13\" y=\"0\" fill=\"#fff\" font-size=\"24\" font-family=\"Helvetica\">2D</text><text x=\"13\" y=\"15\" fill=\"#fff\" font-size=\"12\" font-family=\"Helvetica\">VIEW</text></g></svg>'\n    );\n\n    return svg;\n  }\n}\n"
    },
    "contracts/Utilities.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\nlibrary utils {\n  function getColorName(uint256 _hue) public pure returns (string memory) {\n    string[12] memory colorNames = [\n      \"Red\",\n      \"Orange\",\n      \"Yellow\",\n      \"Chartreuse\",\n      \"Green\",\n      \"Spring\",\n      \"Cyan\",\n      \"Azure\",\n      \"Blue\",\n      \"Violet\",\n      \"Magenta\",\n      \"Rose\"\n    ];\n\n    require(_hue <= 360, \"Hue must be between 0 and 360\");\n\n    uint256 colorIndex = (_hue * 12) / 360;\n    return colorNames[colorIndex];\n  }\n\n  function getHSL(uint256 hue, uint256 saturation, uint256 lightness) internal pure returns (string memory) {\n    return\n      string.concat(\n        \"hsl(\",\n        utils.uint2str(hue),\n        \", \",\n        utils.uint2str(saturation),\n        \"%, \",\n        utils.uint2str(lightness),\n        \"%)\"\n      );\n  }\n\n  function assemblyKeccak(bytes memory _input) public pure returns (bytes32 x) {\n    assembly {\n      x := keccak256(add(_input, 0x20), mload(_input))\n    }\n  }\n\n  function random(string memory input) internal pure returns (uint256) {\n    return uint256(assemblyKeccak(abi.encodePacked(input)));\n  }\n\n  function randomRange(\n    uint256 tokenId,\n    string memory keyPrefix,\n    uint256 lower,\n    uint256 upper\n  ) internal pure returns (uint256) {\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\n    return (rand % (upper - lower + 1)) + lower;\n  }\n\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a > b ? a : b;\n  }\n\n  function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n    require(bs.length >= start + 32, \"slicing out of range\");\n    uint256 x;\n    assembly {\n      x := mload(add(bs, add(0x20, start)))\n    }\n    return x;\n  }\n\n  function int2str(int256 _i) internal pure returns (string memory _uintAsString) {\n    if (_i < 0) {\n      return string.concat(\"-\", uint2str(uint256(-_i)));\n    } else {\n      return uint2str(uint256(_i));\n    }\n  }\n\n  function uint2floatstr(uint256 _i_scaled, uint256 _decimals) internal pure returns (string memory) {\n    return string.concat(uint2str(_i_scaled / (10 ** _decimals)), \".\", uint2str(_i_scaled % (10 ** _decimals)));\n  }\n\n  // converts an unsigned integer to a string from Solady (https://github.com/vectorized/solady/blob/main/src)\n  /// @dev Returns the base 10 decimal representation of `value`.\n  function uint2str(uint256 value) internal pure returns (string memory str) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n      // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n      // We will need 1 word for the trailing zeros padding, 1 word for the length,\n      // and 3 words for a maximum of 78 digits.\n      str := add(mload(0x40), 0x80)\n      // Update the free memory pointer to allocate.\n      mstore(0x40, add(str, 0x20))\n      // Zeroize the slot after the string.\n      mstore(str, 0)\n\n      // Cache the end of the memory to calculate the length later.\n      let end := str\n\n      let w := not(0) // Tsk.\n      // We write the string from rightmost digit to leftmost digit.\n      // The following is essentially a do-while loop that also handles the zero case.\n      for {\n        let temp := value\n      } 1 {\n\n      } {\n        str := add(str, w) // `sub(str, 1)`.\n        // Write the character to the pointer.\n        // The ASCII index of the '0' character is 48.\n        mstore8(str, add(48, mod(temp, 10)))\n        // Keep dividing `temp` until zero.\n        temp := div(temp, 10)\n        if iszero(temp) {\n          break\n        }\n      }\n\n      let length := sub(end, str)\n      // Move the pointer 32 bytes leftwards to make room for the length.\n      str := sub(str, 0x20)\n      // Store the length.\n      mstore(str, length)\n    }\n  }\n\n  /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\n  /// See: https://datatracker.ietf.org/doc/html/rfc4648\n  /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\n  /// @param noPadding Whether to strip away the padding.\n  function encode(bytes memory data, bool fileSafe, bool noPadding) internal pure returns (string memory result) {\n    /// @solidity memory-safe-assembly\n    assembly {\n      let dataLength := mload(data)\n\n      if dataLength {\n        // Multiply by 4/3 rounded up.\n        // The `shl(2, ...)` is equivalent to multiplying by 4.\n        let encodedLength := shl(2, div(add(dataLength, 2), 3))\n\n        // Set `result` to point to the start of the free memory.\n        result := mload(0x40)\n\n        // Store the table into the scratch space.\n        // Offsetted by -1 byte so that the `mload` will load the character.\n        // We will rewrite the free memory pointer at `0x40` later with\n        // the allocated size.\n        // The magic constant 0x0230 will translate \"-_\" + \"+/\".\n        mstore(0x1f, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\")\n        mstore(0x3f, sub(\"ghijklmnopqrstuvwxyz0123456789-_\", mul(iszero(fileSafe), 0x0230)))\n\n        // Skip the first slot, which stores the length.\n        let ptr := add(result, 0x20)\n        let end := add(ptr, encodedLength)\n\n        // Run over the input, 3 bytes at a time.\n        for {\n\n        } 1 {\n\n        } {\n          data := add(data, 3) // Advance 3 bytes.\n          let input := mload(data)\n\n          // Write 4 bytes. Optimized for fewer stack operations.\n          mstore8(0, mload(and(shr(18, input), 0x3F)))\n          mstore8(1, mload(and(shr(12, input), 0x3F)))\n          mstore8(2, mload(and(shr(6, input), 0x3F)))\n          mstore8(3, mload(and(input, 0x3F)))\n          mstore(ptr, mload(0x00))\n\n          ptr := add(ptr, 4) // Advance 4 bytes.\n\n          if iszero(lt(ptr, end)) {\n            break\n          }\n        }\n\n        // Allocate the memory for the string.\n        // Add 31 and mask with `not(31)` to round the\n        // free memory pointer up the next multiple of 32.\n        mstore(0x40, and(add(end, 31), not(31)))\n\n        // Equivalent to `o = [0, 2, 1][dataLength % 3]`.\n        let o := div(2, mod(dataLength, 3))\n\n        // Offset `ptr` and pad with '='. We can simply write over the end.\n        mstore(sub(ptr, o), shl(240, 0x3d3d))\n        // Set `o` to zero if there is padding.\n        o := mul(iszero(iszero(noPadding)), o)\n        // Zeroize the slot after the string.\n        mstore(sub(ptr, o), 0)\n        // Write the length of the string.\n        mstore(result, sub(encodedLength, o))\n      }\n    }\n  }\n\n  /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\n  /// Equivalent to `encode(data, false, false)`.\n  function encode(bytes memory data) internal pure returns (string memory result) {\n    result = encode(data, false, false);\n  }\n}\n"
    },
    "erc721a/contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, together with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
    },
    "erc721a/contracts/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
    },
    "scripty.sol/contracts/scripty/dependencies/ethfs/IContentStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IContentStore {\n    event NewChecksum(bytes32 indexed checksum, uint256 contentSize);\n\n    error ChecksumExists(bytes32 checksum);\n    error ChecksumNotFound(bytes32 checksum);\n\n    function pointers(bytes32 checksum) external view returns (address pointer);\n\n    function checksumExists(bytes32 checksum) external view returns (bool);\n\n    function contentLength(bytes32 checksum)\n        external\n        view\n        returns (uint256 size);\n\n    function addPointer(address pointer) external returns (bytes32 checksum);\n\n    function addContent(bytes memory content)\n        external\n        returns (bytes32 checksum, address pointer);\n\n    function getPointer(bytes32 checksum)\n        external\n        view\n        returns (address pointer);\n}\n"
    },
    "scripty.sol/contracts/scripty/IContractScript.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n///////////////////////////////////////////////////////////\n// ░██████╗░█████╗░██████╗░██╗██████╗░████████╗██╗░░░██╗ //\n// ██╔════╝██╔══██╗██╔══██╗██║██╔══██╗╚══██╔══╝╚██╗░██╔╝ //\n// ╚█████╗░██║░░╚═╝██████╔╝██║██████╔╝░░░██║░░░░╚████╔╝░ //\n// ░╚═══██╗██║░░██╗██╔══██╗██║██╔═══╝░░░░██║░░░░░╚██╔╝░░ //\n// ██████╔╝╚█████╔╝██║░░██║██║██║░░░░░░░░██║░░░░░░██║░░░ //\n// ╚═════╝░░╚════╝░╚═╝░░╚═╝╚═╝╚═╝░░░░░░░░╚═╝░░░░░░╚═╝░░░ //\n///////////////////////////////////////////////////////////\n\ninterface IContractScript {\n    // =============================================================\n    //                            GETTERS\n    // =============================================================\n\n    /**\n     * @notice Get the full script\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param data - Arbitrary data to be passed to storage\n     * @return script - Full script from merged chunks\n     */\n    function getScript(string calldata name, bytes memory data)\n        external\n        view\n        returns (bytes memory script);\n}\n"
    },
    "scripty.sol/contracts/scripty/IScriptyBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n///////////////////////////////////////////////////////////\n// ░██████╗░█████╗░██████╗░██╗██████╗░████████╗██╗░░░██╗ //\n// ██╔════╝██╔══██╗██╔══██╗██║██╔══██╗╚══██╔══╝╚██╗░██╔╝ //\n// ╚█████╗░██║░░╚═╝██████╔╝██║██████╔╝░░░██║░░░░╚████╔╝░ //\n// ░╚═══██╗██║░░██╗██╔══██╗██║██╔═══╝░░░░██║░░░░░╚██╔╝░░ //\n// ██████╔╝╚█████╔╝██║░░██║██║██║░░░░░░░░██║░░░░░░██║░░░ //\n// ╚═════╝░░╚════╝░╚═╝░░╚═╝╚═╝╚═╝░░░░░░░░╚═╝░░░░░░╚═╝░░░ //\n///////////////////////////////////////////////////////////\n\n// =============================================================\n//                            STRUCTS\n// =============================================================\n\nstruct WrappedScriptRequest {\n    string name;\n    address contractAddress;\n    bytes contractData;\n    uint8 wrapType;\n    bytes wrapPrefix;\n    bytes wrapSuffix;\n    bytes scriptContent;\n}\n\nstruct InlineScriptRequest {\n    string name;\n    address contractAddress;\n    bytes contractData;\n    bytes scriptContent;\n}\n\ninterface IScriptyBuilder {\n\n    // =============================================================\n    //                            ERRORS\n    // =============================================================\n\n    /**\n     * @notice Error for, Invalid length of requests\n     */\n    error InvalidRequestsLength();\n\n    // =============================================================\n    //                      RAW HTML GETTERS\n    // =============================================================\n\n    /**\n     * @notice Get requested scripts housed in <body> with custom wrappers\n     * @dev Your requested scripts are returned in the following format:\n     *      <html>\n     *          <head></head>\n     *          <body style='margin:0;'>\n     *              [wrapPrefix[0]]{request[0]}[wrapSuffix[0]]\n     *              [wrapPrefix[1]]{request[1]}[wrapSuffix[1]]\n     *              ...\n     *              [wrapPrefix[n]]{request[n]}[wrapSuffix[n]]\n     *          </body>\n     *      </html>\n     * @param requests - Array of WrappedScriptRequests\n     * @param bufferSize - Total buffer size of all requested scripts\n     * @return Full html wrapped scripts\n     */\n    function getHTMLWrapped(\n        WrappedScriptRequest[] calldata requests,\n        uint256 bufferSize\n    ) external view returns (bytes memory);\n\n    /**\n     * @notice Get requested scripts housed in URL Safe wrappers\n     * @dev Any wrapper type 0 scripts are converted to base64 and wrapped\n     *      with <script src=\"data:text/javascript;base64,[SCRIPT]\"></script>\n     *\n     *      [WARNING]: Large non-base64 libraries that need base64 encoding\n     *      carry a high risk of causing a gas out. Highly advised to use\n     *      base64 encoded scripts where possible\n     *\n     *      Your requested scripts are returned in the following format:\n     *      <html>\n     *          <head></head>\n     *          <body style='margin:0;'>\n     *              [wrapPrefix[0]]{request[0]}[wrapSuffix[0]]\n     *              [wrapPrefix[1]]{request[1]}[wrapSuffix[1]]\n     *              ...\n     *              [wrapPrefix[n]]{request[n]}[wrapSuffix[n]]\n     *          </body>\n     *      </html>\n     * @param requests - Array of WrappedScriptRequests\n     * @param bufferSize - Total buffer size of all requested scripts\n     * @return Full URL Safe wrapped scripts\n     */\n    function getHTMLWrappedURLSafe(\n        WrappedScriptRequest[] calldata requests,\n        uint256 bufferSize\n    ) external view returns (bytes memory);\n\n    /**\n     * @notice Get requested scripts housed in <body> all wrapped in <script></script>\n     * @dev Your requested scripts are returned in the following format:\n     *      <html>\n     *          <head></head>\n     *          <body style='margin:0;'>\n     *              <script>\n     *                  {request[0]}\n     *                  {request[1]}\n     *                  ...\n     *                  {request[n]}\n     *              </script>\n     *          </body>\n     *      </html>\n     * @param requests - Array of InlineScriptRequest\n     * @param bufferSize - Total buffer size of all requested scripts\n     * @return Full html wrapped scripts\n     */\n    function getHTMLInline(\n        InlineScriptRequest[] calldata requests,\n        uint256 bufferSize\n    ) external view returns (bytes memory);\n\n    // =============================================================\n    //                      ENCODED HTML GETTERS\n    // =============================================================\n\n    /**\n     * @notice Get {getHTMLWrapped} and base64 encode it\n     * @param requests - Array of WrappedScriptRequests\n     * @param bufferSize - Total buffer size of all requested scripts\n     * @return Full html wrapped scripts, base64 encoded\n     */\n    function getEncodedHTMLWrapped(\n        WrappedScriptRequest[] calldata requests,\n        uint256 bufferSize\n    ) external view returns (bytes memory);\n\n    /**\n     * @notice Get {getHTMLInline} and base64 encode it\n     * @param requests - Array of InlineScriptRequests\n     * @param bufferSize - Total buffer size of all requested scripts\n     * @return Full html wrapped scripts, base64 encoded\n     */\n    function getEncodedHTMLInline(\n        InlineScriptRequest[] calldata requests,\n        uint256 bufferSize\n    ) external view returns (bytes memory);\n\n    // =============================================================\n    //                      STRING UTILITIES\n    // =============================================================\n\n    /**\n     * @notice Convert {getHTMLWrapped} output to a string\n     * @param requests - Array of WrappedScriptRequests\n     * @param bufferSize - Total buffer size of all requested scripts\n     * @return {getHTMLWrapped} as a string\n     */\n    function getHTMLWrappedString(\n        WrappedScriptRequest[] calldata requests,\n        uint256 bufferSize\n    ) external view returns (string memory);\n\n    /**\n     * @notice Convert {getHTMLInline} output to a string\n     * @param requests - Array of InlineScriptRequests\n     * @param bufferSize - Total buffer size of all requested scripts\n     * @return {getHTMLInline} as a string\n     */\n    function getHTMLInlineString(\n        InlineScriptRequest[] calldata requests,\n        uint256 bufferSize\n    ) external view returns (string memory);\n\n    /**\n     * @notice Convert {getEncodedHTMLWrapped} output to a string\n     * @param requests - Array of WrappedScriptRequests\n     * @param bufferSize - Total buffer size of all requested scripts\n     *                     before encoding.\n     * @return {getEncodedHTMLWrapped} as a string\n     */\n    function getEncodedHTMLWrappedString(\n        WrappedScriptRequest[] calldata requests,\n        uint256 bufferSize\n    ) external view returns (string memory);\n\n    /**\n     * @notice Convert {getEncodedHTMLInline} output to a string\n     * @param requests - Array of InlineScriptRequests\n     * @param bufferSize - Total buffer size of all requested scripts\n     *                     before encoding.\n     * @return {getEncodedHTMLInline} as a string\n     */\n    function getEncodedHTMLInlineString(\n        InlineScriptRequest[] calldata requests,\n        uint256 bufferSize\n    ) external view returns (string memory);\n\n    // =============================================================\n    //                      OFF-CHAIN UTILITIES\n    // =============================================================\n\n    /**\n     * @notice Get the buffer size of a single inline requested code\n     * @param request - InlineScriptRequest data for code\n     * @return Buffer size as an unit256\n     */\n    function getInlineScriptSize(InlineScriptRequest memory request)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Get the buffer size of a single wrapped requested code\n     * @param request - WrappedScriptRequest data for code\n     * @return Buffer size as an unit256\n     */\n    function getWrappedScriptSize(WrappedScriptRequest memory request)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Get the buffer size of a single wrapped requested code\n     * @dev If the script is of wrapper type 0, we get buffer size for\n     *      base64 encoded version.\n     * @param request - WrappedScriptRequest data for code\n     * @return Buffer size as an unit256\n     */\n    function getURLSafeWrappedScriptSize(WrappedScriptRequest memory request)\n    external\n    view\n    returns (uint256);\n\n    /**\n     * @notice Get the buffer size of an array of html wrapped inline scripts\n     * @param requests - InlineScriptRequests data for code\n     * @return Buffer size as an unit256\n     */\n    function getBufferSizeForHTMLInline(InlineScriptRequest[] calldata requests)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Get the buffer size of an array of html wrapped, wrapped scripts\n     * @param requests - WrappedScriptRequests data for code\n     * @return Buffer size as an unit256\n     */\n    function getBufferSizeForHTMLWrapped(\n        WrappedScriptRequest[] calldata requests\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the buffer size of an array of URL safe html wrapped scripts\n     * @param requests - WrappedScriptRequests data for code\n     * @return Buffer size as an unit256\n     */\n    function getBufferSizeForURLSafeHTMLWrapped(\n        WrappedScriptRequest[] calldata requests\n    ) external view returns (uint256);\n    \n    /**\n     * @notice Get the buffer size for encoded HTML inline scripts\n     * @param requests - InlineScriptRequests data for code\n     * @return Buffer size as an unit256\n     */\n    function getBufferSizeForEncodedHTMLInline(\n        InlineScriptRequest[] calldata requests\n    ) external view returns (uint256);\n\n    /**\n     * @notice Get the buffer size for encoded HTML inline scripts\n     * @param requests - InlineScriptRequests data for code\n     * @return Buffer size as an unit256\n     */\n    function getBufferSizeForEncodedHTMLWrapped(\n        WrappedScriptRequest[] calldata requests\n    ) external view returns (uint256);\n}\n"
    },
    "scripty.sol/contracts/scripty/IScriptyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n///////////////////////////////////////////////////////////\n// ░██████╗░█████╗░██████╗░██╗██████╗░████████╗██╗░░░██╗ //\n// ██╔════╝██╔══██╗██╔══██╗██║██╔══██╗╚══██╔══╝╚██╗░██╔╝ //\n// ╚█████╗░██║░░╚═╝██████╔╝██║██████╔╝░░░██║░░░░╚████╔╝░ //\n// ░╚═══██╗██║░░██╗██╔══██╗██║██╔═══╝░░░░██║░░░░░╚██╔╝░░ //\n// ██████╔╝╚█████╔╝██║░░██║██║██║░░░░░░░░██║░░░░░░██║░░░ //\n// ╚═════╝░░╚════╝░╚═╝░░╚═╝╚═╝╚═╝░░░░░░░░╚═╝░░░░░░╚═╝░░░ //\n///////////////////////////////////////////////////////////\n\ninterface IScriptyStorage {\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct Script {\n        bool isVerified;\n        address owner;\n        uint256 size;\n        bytes details;\n        address[] chunks;\n    }\n\n    // =============================================================\n    //                            ERRORS\n    // =============================================================\n\n    /**\n     * @notice Error for, The Script you are trying to create already exists\n     */\n    error ScriptExists();\n\n    /**\n     * @notice Error for, You dont have permissions to perform this action\n     */\n    error NotScriptOwner();\n\n    // =============================================================\n    //                            EVENTS\n    // =============================================================\n\n    /**\n     * @notice Event for, Successful update of script verification status\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param isVerified - Verification status of the script\n     */\n    event ScriptVerificationUpdated(string indexed name, bool isVerified);\n\n    /**\n     * @notice Event for, Successful creation of a script\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param owner - Address of the script owner\n     * @param details - Custom details of the script\n     */\n    event ScriptCreated(string indexed name, address owner, bytes details);\n\n    /**\n     * @notice Event for, Successful addition of script chunk\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param size - Bytes size of the chunk\n     */\n    event ChunkStored(string indexed name, uint256 size);\n\n    /**\n     * @notice Event for, Successful update of custom details\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param owner - Address of the script owner\n     * @param details - Custom details of the script\n     */\n    event ScriptDetailsUpdated(\n        string indexed name,\n        address owner,\n        bytes details\n    );\n\n    // =============================================================\n    //                      MANAGEMENT OPERATIONS\n    // =============================================================\n\n    /**\n     * @notice Create a new script\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param details - Any details the owner wishes to store about the script\n     *\n     * Emits an {ScriptCreated} event.\n     */\n    function createScript(string calldata name, bytes calldata details)\n        external;\n\n    /**\n     * @notice Add a code chunk to the script\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param chunk - Next sequential code chunk\n     *\n     * Emits an {ChunkStored} event.\n     */\n    function addChunkToScript(string calldata name, bytes calldata chunk)\n        external;\n\n    /**\n     * @notice Edit the script details\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param details - Any details the owner wishes to store about the script\n     *\n     * Emits an {ScriptDetailsUpdated} event.\n     */\n    function updateDetails(string calldata name, bytes calldata details)\n        external;\n\n    /**\n     * @notice Update the verification status of the script\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param isVerified - The verification status\n     *\n     * Emits an {ScriptVerificationUpdated} event.\n     */\n    function updateScriptVerification(string calldata name, bool isVerified)\n        external;\n}\n"
    },
    "scripty.sol/contracts/scripty/ScriptyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n///////////////////////////////////////////////////////////\n// ░██████╗░█████╗░██████╗░██╗██████╗░████████╗██╗░░░██╗ //\n// ██╔════╝██╔══██╗██╔══██╗██║██╔══██╗╚══██╔══╝╚██╗░██╔╝ //\n// ╚█████╗░██║░░╚═╝██████╔╝██║██████╔╝░░░██║░░░░╚████╔╝░ //\n// ░╚═══██╗██║░░██╗██╔══██╗██║██╔═══╝░░░░██║░░░░░╚██╔╝░░ //\n// ██████╔╝╚█████╔╝██║░░██║██║██║░░░░░░░░██║░░░░░░██║░░░ //\n// ╚═════╝░░╚════╝░╚═╝░░╚═╝╚═╝╚═╝░░░░░░░░╚═╝░░░░░░╚═╝░░░ //\n///////////////////////////////////////////////////////////\n\n/**\n  @title A generic data storage contract.\n  @author @xtremetom\n  @author @0xthedude\n*/\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IContentStore} from \"./dependencies/ethfs/IContentStore.sol\";\nimport {AddressChunks} from \"./utils/AddressChunks.sol\";\n\nimport {IScriptyStorage} from \"./IScriptyStorage.sol\";\nimport {IContractScript} from \"./IContractScript.sol\";\n\ncontract ScriptyStorage is Ownable, IScriptyStorage, IContractScript {\n    IContentStore public immutable contentStore;\n    mapping(string => Script) public scripts;\n\n    constructor(address _contentStoreAddress) {\n        contentStore = IContentStore(_contentStoreAddress);\n    }\n\n    // =============================================================\n    //                           MODIFIERS\n    // =============================================================\n\n    /**\n     * @notice Check if the msg.sender is the owner of the script\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     */\n    modifier scriptOwner(string memory name) {\n        if (msg.sender != scripts[name].owner) revert NotScriptOwner();\n        _;\n    }\n\n    /**\n     * @notice Check if a script can be created by checking if it already exists\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     */\n    modifier canCreate(string memory name) {\n        if (scripts[name].owner != address(0)) revert ScriptExists();\n        _;\n    }\n\n    // =============================================================\n    //                      MANAGEMENT OPERATIONS\n    // =============================================================\n\n    /**\n     * @notice Create a new script\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param details - Any details the owner wishes to store about the script\n     *\n     * Emits an {ScriptCreated} event.\n     */\n    function createScript(string calldata name, bytes calldata details)\n        public\n        canCreate(name)\n    {\n        scripts[name] = Script(false, msg.sender, 0, details, new address[](0));\n        emit ScriptCreated(name, msg.sender, details);\n    }\n\n    /**\n     * @notice Add a code chunk to the script\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param chunk - Next sequential code chunk\n     *\n     * Emits an {ChunkStored} event.\n     */\n    function addChunkToScript(string calldata name, bytes calldata chunk)\n        public\n        scriptOwner(name)\n    {\n        (, address pointer) = contentStore.addContent(chunk);\n        scripts[name].chunks.push(pointer);\n        scripts[name].size += chunk.length;\n        emit ChunkStored(name, chunk.length);\n    }\n\n    /**\n     * @notice Edit the script details\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param details - Any details the owner wishes to store about the script\n     *\n     * Emits an {ScriptDetailsUpdated} event.\n     */\n    function updateDetails(string calldata name, bytes calldata details)\n        public\n        scriptOwner(name)\n    {\n        scripts[name].details = details;\n        emit ScriptDetailsUpdated(name, msg.sender, details);\n    }\n\n    /**\n     * @notice Update the verification status of the script\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param isVerified - The verification status\n     *\n     * Emits an {ScriptVerificationUpdated} event.\n     */\n    function updateScriptVerification(string calldata name, bool isVerified)\n        public\n        onlyOwner\n    {\n        scripts[name].isVerified = isVerified;\n        emit ScriptVerificationUpdated(name, isVerified);\n    }\n\n    // =============================================================\n    //                            GETTERS\n    // =============================================================\n\n    /**\n     * @notice Get the full script\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @param data - Arbitrary data. Not used by this contract.\n     * @return script - Full script from merged chunks\n     */\n    function getScript(string memory name, bytes memory data)\n        public\n        view\n        returns (bytes memory script)\n    {\n        return AddressChunks.mergeChunks(scripts[name].chunks);\n    }\n\n\n    /**\n     * @notice Get script's chunk pointer list\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\n     * @return pointers - List of pointers\n     */\n    function getScriptChunkPointers(string memory name)\n        public\n        view\n        returns (address[] memory pointers)\n    {\n        return scripts[name].chunks;\n    }\n}\n"
    },
    "scripty.sol/contracts/scripty/utils/AddressChunks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title AddressChunks\n * @author @xtremetom\n * @notice Reads chunk pointers and merges their values\n */\nlibrary AddressChunks {\n    function mergeChunks(address[] memory chunks)\n        internal\n        view\n        returns (bytes memory o_code)\n    {\n        unchecked {\n            assembly {\n                let len := mload(chunks)\n                let totalSize := 0x20\n                let size := 0\n                o_code := mload(0x40)\n\n                // loop through all chunk addresses\n                // - get address\n                // - get data size\n                // - get code and add to o_code\n                // - update total size\n                let targetChunk := 0\n                for {\n                    let i := 0\n                } lt(i, len) {\n                    i := add(i, 1)\n                } {\n                    targetChunk := mload(add(chunks, add(0x20, mul(i, 0x20))))\n                    size := sub(extcodesize(targetChunk), 1)\n                    extcodecopy(targetChunk, add(o_code, totalSize), 1, size)\n                    totalSize := add(totalSize, size)\n                }\n\n                // update o_code size\n                mstore(o_code, sub(totalSize, 0x20))\n                // store o_code\n                mstore(0x40, add(o_code, and(add(totalSize, 0x1f), not(0x1f))))\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
{
  "address": "0xdAbb3cC7c35147e985BAB67799219b363830cF5A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_thumbnailAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rendererAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Finalized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RefundFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SoldOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenDoesntExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "planetSize",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasRings",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "numMoons",
              "type": "uint256"
            },
            {
              "internalType": "enum PlanetType",
              "name": "planetType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "hue",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasWater",
              "type": "bool"
            },
            {
              "internalType": "bytes[7]",
              "name": "vars",
              "type": "bytes[7]"
            }
          ],
          "internalType": "struct Settings",
          "name": "settings",
          "type": "tuple"
        }
      ],
      "name": "buildAttributes",
      "outputs": [
        {
          "internalType": "string",
          "name": "attr",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "buildSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "planetSize",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasRings",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "numMoons",
              "type": "uint256"
            },
            {
              "internalType": "enum PlanetType",
              "name": "planetType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "hue",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasWater",
              "type": "bool"
            },
            {
              "internalType": "bytes[7]",
              "name": "vars",
              "type": "bytes[7]"
            }
          ],
          "internalType": "struct Settings",
          "name": "settings",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "planetSize",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasRings",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "numMoons",
              "type": "uint256"
            },
            {
              "internalType": "enum PlanetType",
              "name": "planetType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "hue",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasWater",
              "type": "bool"
            },
            {
              "internalType": "bytes[7]",
              "name": "vars",
              "type": "bytes[7]"
            }
          ],
          "internalType": "struct Settings",
          "name": "settings",
          "type": "tuple"
        }
      ],
      "name": "buildVars",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "vars",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rendererAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setMintStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rendererAddress",
          "type": "address"
        }
      ],
      "name": "setRendererAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_thumbnailAddress",
          "type": "address"
        }
      ],
      "name": "setThumbnailAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "thumbnailAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc05d92c4b71c5398b32be8232a9f04947dcca79a04fb751d5de5e103b999183c",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0xdAbb3cC7c35147e985BAB67799219b363830cF5A",
    "transactionIndex": 149,
    "gasUsed": "4246595",
    "logsBloom": "0x
    "blockHash": "0x17064917e91b6f131adc91abc3ea0dde9b2500a343e098e9bd1af9f12e2fc180",
    "transactionHash": "0xc05d92c4b71c5398b32be8232a9f04947dcca79a04fb751d5de5e103b999183c",
    "logs": [
      {
        "transactionIndex": 149,
        "blockNumber": 17024305,
        "transactionHash": "0xc05d92c4b71c5398b32be8232a9f04947dcca79a04fb751d5de5e103b999183c",
        "address": "0xdAbb3cC7c35147e985BAB67799219b363830cF5A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc78016816633528dd4918746d7f016563ce27fa"
        ],
        "data": "0x",
        "logIndex": 304,
        "blockHash": "0x17064917e91b6f131adc91abc3ea0dde9b2500a343e098e9bd1af9f12e2fc180"
      }
    ],
    "blockNumber": 17024305,
    "cumulativeGasUsed": "15845662",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "EtherPlanets",
    "EP",
    4242,
    "4200000000000000",
    "0x07e12F3F0bFCeEE2B92B68eD485E85B896761C75",
    "0x16ec9b5a0aef45cA3642000Df11f0b2C42Bdac45"
  ],
  "numDeployments": 1,
  "solcInputHash": "4606a8fba972cdde1ca2c7fec03eb1c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_thumbnailAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rendererAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Finalized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SoldOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesntExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasRings\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numMoons\",\"type\":\"uint256\"},{\"internalType\":\"enum PlanetType\",\"name\":\"planetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"hue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasWater\",\"type\":\"bool\"},{\"internalType\":\"bytes[7]\",\"name\":\"vars\",\"type\":\"bytes[7]\"}],\"internalType\":\"struct Settings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"buildAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attr\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buildSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasRings\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numMoons\",\"type\":\"uint256\"},{\"internalType\":\"enum PlanetType\",\"name\":\"planetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"hue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasWater\",\"type\":\"bool\"},{\"internalType\":\"bytes[7]\",\"name\":\"vars\",\"type\":\"bytes[7]\"}],\"internalType\":\"struct Settings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasRings\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numMoons\",\"type\":\"uint256\"},{\"internalType\":\"enum PlanetType\",\"name\":\"planetType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"hue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasWater\",\"type\":\"bool\"},{\"internalType\":\"bytes[7]\",\"name\":\"vars\",\"type\":\"bytes[7]\"}],\"internalType\":\"struct Settings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"buildVars\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"vars\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rendererAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setMintStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rendererAddress\",\"type\":\"address\"}],\"name\":\"setRendererAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_thumbnailAddress\",\"type\":\"address\"}],\"name\":\"setThumbnailAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thumbnailAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"airdrop(address[],uint256)\":{\"params\":{\"_quantity\":\"Quantity of tokens to airdrop to each recipient.\",\"_recipients\":\"List of recipients to receive the airdrop.\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"buildAttributes((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))\":{\"params\":{\"settings\":\"- Track settings struct\"},\"returns\":{\"attr\":\"- array as a string\"}},\"buildSettings(uint256)\":{\"params\":{\"_tokenId\":\"- Token ID for seed value\"},\"returns\":{\"settings\":\"- All settings as a struct\"}},\"buildVars((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))\":{\"params\":{\"settings\":\"- Track settings struct\"},\"returns\":{\"vars\":\"- base64 encoded JS compatible setting variables\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"mint(uint256)\":{\"params\":{\"_quantity\":\"Quantity of tokens to mint.\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setMintStatus(bool)\":{\"params\":{\"_state\":\"- Boolean state for being open or closed.\"}},\"setPrice(uint256)\":{\"details\":\"Very doubtful this gets used, but good to have\",\"params\":{\"_price\":\"- The new price.\"}},\"setRendererAddress(address)\":{\"params\":{\"_rendererAddress\":\"- Address of the renderer contract.\"}},\"setThumbnailAddress(address)\":{\"params\":{\"_thumbnailAddress\":\"- Address of the thumbnail contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"This depends on      - https://ethfs.xyz/ [stores code libraries]      - https://github.com/intartnft/scripty.sol [builds rendering html and stores code libraries]\",\"params\":{\"_tokenId\":\"- TokenId to build planet for\"},\"returns\":{\"metadata\":\"- as string\"}},\"totalMinted()\":{\"returns\":{\"_0\":\"Total number of minted tokens\"}},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"airdrop(address[],uint256)\":{\"notice\":\"Airdrops tokens to a list of recipients. Only callable by the contract owner.\"},\"buildAttributes((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))\":{\"notice\":\"Build attributes for metadata\"},\"buildSettings(uint256)\":{\"notice\":\"Build all the settings into a struct\"},\"buildVars((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))\":{\"notice\":\"Pack and base64 encode JS compatible vars\"},\"mint(uint256)\":{\"notice\":\"Mints new tokens for the caller.\"},\"setMintStatus(bool)\":{\"notice\":\"Open or close minting\"},\"setPrice(uint256)\":{\"notice\":\"Update the mint price.\"},\"setRendererAddress(address)\":{\"notice\":\"Update renderer contract address\"},\"setThumbnailAddress(address)\":{\"notice\":\"Update thumbnail contract address\"},\"tokenURI(uint256)\":{\"notice\":\"Build the metadata including the full render html for the planet\"},\"totalMinted()\":{\"notice\":\"Retrieve how many tokens have been minted\"},\"withdraw()\":{\"notice\":\"Withdraws the contract's balance. Only callable by the contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Planets.sol\":\"Planets\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Planets.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2003\\u2003\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2003\\u2003\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2003\\u2003\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2003\\u2003\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2003\\u2003\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u255a\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u2003\\u2003\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./PlanetsThumbnail.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\nimport \\\"./interfaces/IPlanets.sol\\\";\\nimport \\\"./interfaces/IPlanetsRenderer.sol\\\";\\nimport \\\"scripty.sol/contracts/scripty/IScriptyBuilder.sol\\\";\\nimport {ERC721A} from \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Planets is ERC721A, Ownable {\\n  uint256 public immutable deployBlock;\\n  uint256 public immutable supply;\\n  address public thumbnailAddress;\\n  address public rendererAddress;\\n\\n  uint256 public price;\\n  bool public isOpen;\\n\\n  bool public finalized;\\n\\n  error MintClosed();\\n  error SoldOut();\\n  error InsufficientFunds();\\n  error TokenDoesntExist();\\n  error RefundFailed();\\n  error Finalized();\\n\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    uint256 _supply,\\n    uint256 _price,\\n    address _thumbnailAddress,\\n    address _rendererAddress\\n  ) ERC721A(name, symbol) {\\n    thumbnailAddress = _thumbnailAddress;\\n    rendererAddress = _rendererAddress;\\n\\n    supply = _supply;\\n    price = _price;\\n\\n    deployBlock = block.number;\\n  }\\n\\n  /**\\n   * @notice  Airdrops tokens to a list of recipients. Only callable by the contract owner.\\n   * @param _recipients List of recipients to receive the airdrop.\\n   * @param _quantity Quantity of tokens to airdrop to each recipient.\\n   */\\n  function airdrop(address[] calldata _recipients, uint256 _quantity) external payable onlyOwner {\\n    if (totalMinted() + _recipients.length * _quantity > supply) revert SoldOut();\\n    for (uint256 i = 0; i < _recipients.length; i++) {\\n      _mint(_recipients[i], _quantity);\\n    }\\n  }\\n\\n  /**\\n   * @notice Mints new tokens for the caller.\\n   * @param _quantity Quantity of tokens to mint.\\n   */\\n  function mint(uint256 _quantity) public payable {\\n    if (!isOpen) revert MintClosed();\\n    if (totalMinted() + _quantity > supply) revert SoldOut();\\n    if (msg.value < price * _quantity) revert InsufficientFunds();\\n\\n    _mint(msg.sender, _quantity);\\n\\n    // Refund any extra ETH sent\\n    if (msg.value > price * _quantity) {\\n      (bool status, ) = payable(msg.sender).call{value: msg.value - price * _quantity}(\\\"\\\");\\n      if (!status) revert RefundFailed();\\n    }\\n  }\\n\\n  /**\\n   * @notice Withdraws the contract's balance. Only callable by the contract owner.\\n   */\\n  function withdraw() external onlyOwner {\\n    require(payable(msg.sender).send(address(this).balance));\\n  }\\n\\n  /**\\n   * @notice Update the mint price.\\n   * @dev Very doubtful this gets used, but good to have\\n   * @param _price - The new price.\\n   */\\n  function setPrice(uint256 _price) external onlyOwner {\\n    price = _price;\\n  }\\n\\n  /**\\n   * @notice Update thumbnail contract address\\n   * @param _thumbnailAddress - Address of the thumbnail contract.\\n   */\\n  function setThumbnailAddress(address _thumbnailAddress) external onlyOwner {\\n    if (finalized) revert Finalized();\\n    thumbnailAddress = _thumbnailAddress;\\n  }\\n\\n  /**\\n   * @notice Update renderer contract address\\n   * @param _rendererAddress - Address of the renderer contract.\\n   */\\n  function setRendererAddress(address _rendererAddress) external onlyOwner {\\n    if (finalized) revert Finalized();\\n    rendererAddress = _rendererAddress;\\n  }\\n\\n  /**\\n   * @notice Open or close minting\\n   * @param _state - Boolean state for being open or closed.\\n   */\\n  function setMintStatus(bool _state) external onlyOwner {\\n    isOpen = _state;\\n  }\\n\\n  function finalize() external onlyOwner {\\n    finalized = true;\\n  }\\n\\n  /**\\n   * @notice Minting starts at token id #1\\n   * @return Token id to start minting at\\n   */\\n  function _startTokenId() internal pure override returns (uint256) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @notice Retrieve how many tokens have been minted\\n   * @return Total number of minted tokens\\n   */\\n  function totalMinted() public view returns (uint256) {\\n    return _totalMinted();\\n  }\\n\\n  function formatVar(bytes memory _name, uint256 _value) internal pure returns (bytes memory) {\\n    return abi.encodePacked(\\\"var \\\", _name, \\\"=\\\", utils.uint2str(_value), \\\";\\\");\\n  }\\n\\n  /**\\n   * @notice Build all the settings into a struct\\n   * @param _tokenId - Token ID for seed value\\n   * @return settings - All settings as a struct\\n   */\\n  function buildSettings(uint256 _tokenId) public view returns (Settings memory settings) {\\n    uint256 randomSeed = _tokenId + deployBlock;\\n\\n    settings.seed = utils.randomRange(randomSeed, \\\"seed\\\", 1, 1000000);\\n    settings.vars[0] = formatVar(\\\"seed\\\", settings.seed);\\n\\n    settings.planetSize = utils.randomRange(randomSeed, \\\"planetSize\\\", 30, 100);\\n    settings.vars[1] = formatVar(\\\"planetSize\\\", settings.planetSize);\\n\\n    // 40% gas, 60% rock\\n    settings.planetType = utils.randomRange(randomSeed, \\\"planetType\\\", 0, 10) < 4 ? PlanetType.GAS : PlanetType.SOLID;\\n    settings.vars[4] = formatVar(\\\"planetType\\\", uint256(settings.planetType));\\n\\n    // 30% of gaseous planets;\\n    settings.hasRings = settings.planetType == PlanetType.GAS && utils.randomRange(randomSeed, \\\"hasRings\\\", 0, 10) < 3;\\n    settings.vars[2] = formatVar(\\\"hasRings\\\", settings.hasRings ? 1 : 0);\\n\\n    {\\n      // 25% 1 moon, 12% 2 moons, 3% 3 moons\\n      uint256 observation = utils.randomRange(randomSeed, \\\"numMoons\\\", 0, 100);\\n      if (observation < 25) settings.numMoons = 1;\\n      else if (observation < 37) settings.numMoons = 2;\\n      else if (observation < 40) settings.numMoons = 3;\\n      else settings.numMoons = 0;\\n      settings.vars[3] = formatVar(\\\"numMoons\\\", settings.numMoons);\\n    }\\n\\n    settings.hue = utils.randomRange(randomSeed, \\\"baseHue\\\", 0, 360);\\n    settings.vars[5] = formatVar(\\\"baseHue\\\", settings.hue);\\n\\n    // If rocky, 30% water\\n    settings.hasWater = settings.planetType == PlanetType.SOLID && utils.randomRange(randomSeed, \\\"hasWater\\\", 0, 10) < 3;\\n    settings.vars[6] = formatVar(\\\"hasWater\\\", settings.hasWater ? 1 : 0);\\n\\n    return settings;\\n  }\\n\\n  /**\\n   * @notice Util function to help build traits\\n   * @param _key - Trait key as string\\n   * @param _value - Trait value as string\\n   * @return trait - object as string\\n   */\\n  function buildTraitString(string memory _key, string memory _value) internal pure returns (string memory trait) {\\n    return string.concat('{\\\"trait_type\\\":\\\"', _key, '\\\",\\\"value\\\":\\\"', _value, '\\\"}');\\n  }\\n\\n  /**\\n   * @notice Util function to help build traits where value is continuous\\n   * @param _key - Trait key as string\\n   * @param _value - Trait value as string\\n   * @return trait - object as string\\n   */\\n  function buildTraitNumber(string memory _key, string memory _value) internal pure returns (string memory trait) {\\n    return string.concat('{\\\"trait_type\\\":\\\"', _key, '\\\",\\\"value\\\":', _value, \\\"}\\\");\\n  }\\n\\n  /**\\n   * @notice Build attributes for metadata\\n   * @param settings - Track settings struct\\n   * @return attr - array as a string\\n   */\\n  function buildAttributes(Settings memory settings) public pure returns (string memory attr) {\\n    return\\n      string.concat(\\n        '\\\"attributes\\\": [',\\n        buildTraitNumber(\\\"Planet Size\\\", utils.uint2str(settings.planetSize)),\\n        \\\",\\\",\\n        buildTraitString(\\\"Has Rings\\\", settings.hasRings ? \\\"Yes\\\" : \\\"No\\\"),\\n        \\\",\\\",\\n        buildTraitString(\\\"Has Water\\\", settings.hasWater ? \\\"Yes\\\" : \\\"No\\\"),\\n        \\\",\\\",\\n        buildTraitString(\\\"Number of Moons\\\", utils.uint2str(settings.numMoons)),\\n        \\\",\\\",\\n        buildTraitString(\\\"Planet Type\\\", settings.planetType == PlanetType.SOLID ? \\\"Rock\\\" : \\\"Gas\\\"),\\n        \\\",\\\",\\n        buildTraitString(\\\"Planet Color\\\", utils.getColorName(settings.hue)),\\n        \\\"]\\\"\\n      );\\n  }\\n\\n  /**\\n   * @notice Pack and base64 encode JS compatible vars\\n   * @param settings - Track settings struct\\n   * @return vars - base64 encoded JS compatible setting variables\\n   */\\n  function buildVars(Settings memory settings) public pure returns (bytes memory vars) {\\n    return\\n      bytes(\\n        utils.encode(\\n          abi.encodePacked(\\n            settings.vars[0],\\n            settings.vars[1],\\n            settings.vars[2],\\n            settings.vars[3],\\n            settings.vars[4],\\n            settings.vars[5],\\n            settings.vars[6]\\n          )\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Build the metadata including the full render html for the planet\\n   * @dev This depends on\\n   *      - https://ethfs.xyz/ [stores code libraries]\\n   *      - https://github.com/intartnft/scripty.sol [builds rendering html and stores code libraries]\\n   * @param _tokenId - TokenId to build planet for\\n   * @return metadata - as string\\n   */\\n  function tokenURI(uint256 _tokenId) public view virtual override(ERC721A) returns (string memory metadata) {\\n    // show nothing if token doesnt exist\\n    if (!_exists(_tokenId)) revert TokenDoesntExist();\\n\\n    // Generate all the settings and various objects for the metadata\\n    Settings memory settings = buildSettings(_tokenId);\\n    string memory attr = buildAttributes(settings);\\n    bytes memory vars = buildVars(settings);\\n    string memory thumbnail = utils.encode(PlanetsThumbnail(thumbnailAddress).buildThumbnail(settings));\\n\\n    bytes memory animationUri = IPlanetsRenderer(rendererAddress).buildAnimationURI(vars);\\n\\n    bytes memory json = abi.encodePacked(\\n      '{\\\"name\\\":\\\"',\\n      \\\"EtherPlanet #\\\",\\n      utils.uint2str(_tokenId),\\n      '\\\", \\\"description\\\":\\\"',\\n      \\\"Fully on-chain, procedurally generated, 3D planets.\\\",\\n      '\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,',\\n      thumbnail,\\n      '\\\",\\\"animation_url\\\":\\\"',\\n      animationUri,\\n      '\\\",',\\n      attr,\\n      \\\"}\\\"\\n    );\\n\\n    return string(abi.encodePacked(\\\"data:application/json,\\\", json));\\n  }\\n}\\n\",\"keccak256\":\"0xb10f49c93f606b40fe44d30a4a1d37de34947ef97444127b0dbb04bcd46a24fe\",\"license\":\"MIT\"},\"contracts/PlanetsThumbnail.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/IPlanets.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\ncontract PlanetsThumbnail {\\n  uint256 private constant CANVAS_SIZE = 500;\\n  bytes private constant BACKGROUND =\\n    '<g fill=\\\"#fff\\\"><circle cx=\\\"50\\\" cy=\\\"100\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"200\\\" cy=\\\"150\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"300\\\" cy=\\\"250\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"400\\\" cy=\\\"75\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"175\\\" cy=\\\"200\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"450\\\" cy=\\\"350\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"125\\\" cy=\\\"400\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"375\\\" cy=\\\"300\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"225\\\" cy=\\\"375\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"75\\\" cy=\\\"250\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/><circle cx=\\\"25\\\" cy=\\\"25\\\" r=\\\"2\\\" fill=\\\"#fff\\\"/></g>';\\n  bytes private constant PLANET =\\n    '<path class=\\\"rings\\\" stroke-width=\\\"8.686\\\" d=\\\"M149.379 79.264c0-5.756-32.406-10.423-72.38-10.423-39.976 0-72.382 4.667-72.382 10.423\\\"/><ellipse cx=\\\"76.713\\\" cy=\\\"69.999\\\" class=\\\"body\\\" rx=\\\"50.088\\\" ry=\\\"49.798\\\"/><mask id=\\\"a\\\" width=\\\"101\\\" height=\\\"102\\\" x=\\\"26\\\" y=\\\"19\\\" maskUnits=\\\"userSpaceOnUse\\\" style=\\\"mask-type:alpha\\\"><circle cx=\\\"76.515\\\" cy=\\\"70\\\" r=\\\"50\\\" fill=\\\"#AC0000\\\" transform=\\\"rotate(-33.909 76.515 70)\\\"/></mask><g mask=\\\"url(#a)\\\"><path class=\\\"water\\\" d=\\\"M84.845 48.333c.476-2.063 2.428-8.047 6.428-15.476 3.049-1.905 10.795-3.016 14.287-3.333h14.048l15 25-8.81 24.285h-.714c-.571.572-2.143.556-2.857.477l-9.762-5.477a20.235 20.235 0 0 0-21.192-12.857c-12.952 1.143-9.682-7.936-6.428-12.619ZM34.137 66.904c-3.239-1.333-6.27 2.46-7.381 4.524l-2.858 1.429 2.143 23.095 25.477 20.953c1.587-1.826 5-6.381 5.952-10 1.19-4.524-3.333-7.858-6.905-9.286-3.571-1.429-1.905-8.572-.714-11.429 1.19-2.857-3.334-8.571-8.334-11.428-5-2.858-3.333-6.19-7.38-7.858Z\\\"/><path class=\\\"body-sec\\\" d=\\\"M72.5 100.5C67 93.5 80 89.5 78 84c1.334-1.167 5.2-4.4 10-8 6-4.5 19.5 0 23 4.5s-.5 11-3.5 20c-2.4 7.2-10 8-13.5 7.5-5.333-.167-17.1-1.9-21.5-7.5ZM44 70.5c0-2-2.6-8.2-13-17l-4.5-2 20-25.5c2.167 1.833 7.3 4.4 10.5 0 4-5.5 10.5.5 13 5.5S61.5 41 70 42s8 1 8 11.5S72.5 57 72.5 65s-9 11-17 11c-6.4 0-10.333-3.667-11.5-5.5Z\\\"/></g><path class=\\\"rings\\\" stroke-width=\\\"8.686\\\" d=\\\"M149.379 78.106c0 5.757-32.406 10.423-72.38 10.423-39.976 0-72.382-4.666-72.382-10.423\\\"/>';\\n\\n  string[3] private MOONS = [\\n    '<circle cx=\\\"22\\\" cy=\\\"171\\\" r=\\\"22\\\" fill=\\\"#BBBBBB\\\"/>',\\n    '<circle cx=\\\"370\\\" cy=\\\"106\\\" r=\\\"16\\\" fill=\\\"#BBBBBB\\\"/>',\\n    '<circle cx=\\\"30\\\" cy=\\\"11\\\" r=\\\"11\\\" fill=\\\"#BBBBBB\\\"/>'\\n  ];\\n\\n  function getPlanet(uint256 planetSize) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<g transform-origin=\\\"72 60\\\" transform=\\\"translate(-26,-20),translate(200,200),scale(',\\n          utils.uint2floatstr((planetSize * 1e3) / 40, 3),\\n          ')\\\">',\\n          PLANET,\\n          \\\"</g>\\\"\\n        )\\n      );\\n  }\\n\\n  function getMoons(uint256 numMoons) internal view returns (bytes memory) {\\n    bytes memory moons = '<g transform=\\\"translate(50,170)\\\">';\\n    for (uint256 i = 0; i < numMoons; i++) {\\n      moons = abi.encodePacked(moons, MOONS[i]);\\n    }\\n    moons = abi.encodePacked(moons, \\\"</g>\\\");\\n    return moons;\\n  }\\n\\n  /**\\n   * @notice Build the SVG thumbnail\\n   * @param _settings - Track settings struct\\n   * @return final svg as bytes\\n   */\\n  function buildThumbnail(Settings calldata _settings) external view returns (bytes memory) {\\n    bytes memory svg = abi.encodePacked(\\n      '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 ',\\n      utils.uint2str(CANVAS_SIZE),\\n      \\\" \\\",\\n      utils.uint2str(CANVAS_SIZE),\\n      '\\\" width=\\\"500\\\" height=\\\"500\\\" fill=\\\"none\\\">',\\n      // \\\"<defs><style>.rings{stroke:\\\",\\n      // _settings.hasRings ? getHSL(_settings.hue, 100, 15) : \\\"none\\\",\\n      // \\\";}.body{fill:\\\",\\n      // getHSL(_settings.hue, 70, 34),\\n      // \\\";}.water{fill:\\\",\\n      // _settings.planetType == PlanetType.SOLID ? \\\"#2680D9\\\" : \\\"none\\\",\\n      // \\\";}</style></defs>\\\",\\n      \\\"<defs><style>\\\",\\n      \\\".rings { stroke: \\\",\\n      _settings.hasRings ? utils.getHSL(_settings.hue, 100, 15) : \\\"none\\\",\\n      \\\"; }\\\",\\n      \\\".body { fill: \\\",\\n      utils.getHSL(_settings.hue, 60, 40),\\n      \\\"; }\\\",\\n      \\\".body-sec { fill: \\\",\\n      _settings.planetType == PlanetType.SOLID ? utils.getHSL((_settings.hue + 5) % 360, 45, 50) : \\\"none\\\",\\n      \\\"; }\\\",\\n      \\\".water { fill: \\\",\\n      _settings.hasWater ? \\\"#2680D9\\\" : \\\"none\\\",\\n      \\\"; }\\\",\\n      \\\"</style></defs>\\\",\\n      '<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"',\\n      utils.uint2str(CANVAS_SIZE),\\n      '\\\" height=\\\"',\\n      utils.uint2str(CANVAS_SIZE),\\n      '\\\" fill=\\\"#000000\\\"/>',\\n      BACKGROUND,\\n      getPlanet(_settings.planetSize),\\n      getMoons(_settings.numMoons),\\n      '<g transform=\\\"translate(440,470)\\\"><text x=\\\"13\\\" y=\\\"0\\\" fill=\\\"#fff\\\" font-size=\\\"24\\\" font-family=\\\"Helvetica\\\">2D</text><text x=\\\"13\\\" y=\\\"15\\\" fill=\\\"#fff\\\" font-size=\\\"12\\\" font-family=\\\"Helvetica\\\">VIEW</text></g></svg>'\\n    );\\n\\n    return svg;\\n  }\\n}\\n\",\"keccak256\":\"0x544e1673b37fdc0524b4e3bf2ed2b5048f7ec606f5852319df00284776db5db6\",\"license\":\"MIT\"},\"contracts/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nlibrary utils {\\n  function getColorName(uint256 _hue) public pure returns (string memory) {\\n    string[12] memory colorNames = [\\n      \\\"Red\\\",\\n      \\\"Orange\\\",\\n      \\\"Yellow\\\",\\n      \\\"Chartreuse\\\",\\n      \\\"Green\\\",\\n      \\\"Spring\\\",\\n      \\\"Cyan\\\",\\n      \\\"Azure\\\",\\n      \\\"Blue\\\",\\n      \\\"Violet\\\",\\n      \\\"Magenta\\\",\\n      \\\"Rose\\\"\\n    ];\\n\\n    require(_hue <= 360, \\\"Hue must be between 0 and 360\\\");\\n\\n    uint256 colorIndex = (_hue * 12) / 360;\\n    return colorNames[colorIndex];\\n  }\\n\\n  function getHSL(uint256 hue, uint256 saturation, uint256 lightness) internal pure returns (string memory) {\\n    return\\n      string.concat(\\n        \\\"hsl(\\\",\\n        utils.uint2str(hue),\\n        \\\", \\\",\\n        utils.uint2str(saturation),\\n        \\\"%, \\\",\\n        utils.uint2str(lightness),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function assemblyKeccak(bytes memory _input) public pure returns (bytes32 x) {\\n    assembly {\\n      x := keccak256(add(_input, 0x20), mload(_input))\\n    }\\n  }\\n\\n  function random(string memory input) internal pure returns (uint256) {\\n    return uint256(assemblyKeccak(abi.encodePacked(input)));\\n  }\\n\\n  function randomRange(\\n    uint256 tokenId,\\n    string memory keyPrefix,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256) {\\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\\n    return (rand % (upper - lower + 1)) + lower;\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\\n    require(bs.length >= start + 32, \\\"slicing out of range\\\");\\n    uint256 x;\\n    assembly {\\n      x := mload(add(bs, add(0x20, start)))\\n    }\\n    return x;\\n  }\\n\\n  function int2str(int256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i < 0) {\\n      return string.concat(\\\"-\\\", uint2str(uint256(-_i)));\\n    } else {\\n      return uint2str(uint256(_i));\\n    }\\n  }\\n\\n  function uint2floatstr(uint256 _i_scaled, uint256 _decimals) internal pure returns (string memory) {\\n    return string.concat(uint2str(_i_scaled / (10 ** _decimals)), \\\".\\\", uint2str(_i_scaled % (10 ** _decimals)));\\n  }\\n\\n  // converts an unsigned integer to a string from Solady (https://github.com/vectorized/solady/blob/main/src)\\n  /// @dev Returns the base 10 decimal representation of `value`.\\n  function uint2str(uint256 value) internal pure returns (string memory str) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n      // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n      // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n      // and 3 words for a maximum of 78 digits.\\n      str := add(mload(0x40), 0x80)\\n      // Update the free memory pointer to allocate.\\n      mstore(0x40, add(str, 0x20))\\n      // Zeroize the slot after the string.\\n      mstore(str, 0)\\n\\n      // Cache the end of the memory to calculate the length later.\\n      let end := str\\n\\n      let w := not(0) // Tsk.\\n      // We write the string from rightmost digit to leftmost digit.\\n      // The following is essentially a do-while loop that also handles the zero case.\\n      for {\\n        let temp := value\\n      } 1 {\\n\\n      } {\\n        str := add(str, w) // `sub(str, 1)`.\\n        // Write the character to the pointer.\\n        // The ASCII index of the '0' character is 48.\\n        mstore8(str, add(48, mod(temp, 10)))\\n        // Keep dividing `temp` until zero.\\n        temp := div(temp, 10)\\n        if iszero(temp) {\\n          break\\n        }\\n      }\\n\\n      let length := sub(end, str)\\n      // Move the pointer 32 bytes leftwards to make room for the length.\\n      str := sub(str, 0x20)\\n      // Store the length.\\n      mstore(str, length)\\n    }\\n  }\\n\\n  /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n  /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n  /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n  /// @param noPadding Whether to strip away the padding.\\n  function encode(bytes memory data, bool fileSafe, bool noPadding) internal pure returns (string memory result) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      let dataLength := mload(data)\\n\\n      if dataLength {\\n        // Multiply by 4/3 rounded up.\\n        // The `shl(2, ...)` is equivalent to multiplying by 4.\\n        let encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n        // Set `result` to point to the start of the free memory.\\n        result := mload(0x40)\\n\\n        // Store the table into the scratch space.\\n        // Offsetted by -1 byte so that the `mload` will load the character.\\n        // We will rewrite the free memory pointer at `0x40` later with\\n        // the allocated size.\\n        // The magic constant 0x0230 will translate \\\"-_\\\" + \\\"+/\\\".\\n        mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n        mstore(0x3f, sub(\\\"ghijklmnopqrstuvwxyz0123456789-_\\\", mul(iszero(fileSafe), 0x0230)))\\n\\n        // Skip the first slot, which stores the length.\\n        let ptr := add(result, 0x20)\\n        let end := add(ptr, encodedLength)\\n\\n        // Run over the input, 3 bytes at a time.\\n        for {\\n\\n        } 1 {\\n\\n        } {\\n          data := add(data, 3) // Advance 3 bytes.\\n          let input := mload(data)\\n\\n          // Write 4 bytes. Optimized for fewer stack operations.\\n          mstore8(0, mload(and(shr(18, input), 0x3F)))\\n          mstore8(1, mload(and(shr(12, input), 0x3F)))\\n          mstore8(2, mload(and(shr(6, input), 0x3F)))\\n          mstore8(3, mload(and(input, 0x3F)))\\n          mstore(ptr, mload(0x00))\\n\\n          ptr := add(ptr, 4) // Advance 4 bytes.\\n\\n          if iszero(lt(ptr, end)) {\\n            break\\n          }\\n        }\\n\\n        // Allocate the memory for the string.\\n        // Add 31 and mask with `not(31)` to round the\\n        // free memory pointer up the next multiple of 32.\\n        mstore(0x40, and(add(end, 31), not(31)))\\n\\n        // Equivalent to `o = [0, 2, 1][dataLength % 3]`.\\n        let o := div(2, mod(dataLength, 3))\\n\\n        // Offset `ptr` and pad with '='. We can simply write over the end.\\n        mstore(sub(ptr, o), shl(240, 0x3d3d))\\n        // Set `o` to zero if there is padding.\\n        o := mul(iszero(iszero(noPadding)), o)\\n        // Zeroize the slot after the string.\\n        mstore(sub(ptr, o), 0)\\n        // Write the length of the string.\\n        mstore(result, sub(encodedLength, o))\\n      }\\n    }\\n  }\\n\\n  /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n  /// Equivalent to `encode(data, false, false)`.\\n  function encode(bytes memory data) internal pure returns (string memory result) {\\n    result = encode(data, false, false);\\n  }\\n}\\n\",\"keccak256\":\"0x9cfa7d6aba0fabcacdc12fc0fead353c833154331b3d0feddf52210eb42e0fa8\",\"license\":\"MIT\"},\"contracts/interfaces/IPlanets.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nenum PlanetType {\\n  GAS,\\n  SOLID\\n}\\n\\nstruct Settings {\\n  uint256 seed;\\n  uint256 planetSize;\\n  bool hasRings;\\n  uint256 numMoons;\\n  PlanetType planetType;\\n  uint256 hue;\\n  bool hasWater;\\n  bytes[7] vars;\\n}\\n\",\"keccak256\":\"0xde247baaac85eaf9d393d7e8d22c19eb9eb61272cc00c9b01577b2dd97298685\",\"license\":\"MIT\"},\"contracts/interfaces/IPlanetsRenderer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"scripty.sol/contracts/scripty/IScriptyBuilder.sol\\\";\\nimport \\\"./IPlanets.sol\\\";\\n\\ninterface IPlanetsRenderer {\\n  function buildAnimationURI(bytes calldata vars) external view returns (bytes memory html);\\n}\\n\",\"keccak256\":\"0xdfd18775cc933e1eaaa7a19572e523e680b91d4bac972eb4295b3fa7ac217138\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"},\"scripty.sol/contracts/scripty/IScriptyBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n///////////////////////////////////////////////////////////\\n// \\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557 //\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u255a\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2554\\u255d //\\n// \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u255a\\u2550\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591 //\\n// \\u2591\\u255a\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591 //\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591 //\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591 //\\n///////////////////////////////////////////////////////////\\n\\n// =============================================================\\n//                            STRUCTS\\n// =============================================================\\n\\nstruct WrappedScriptRequest {\\n    string name;\\n    address contractAddress;\\n    bytes contractData;\\n    uint8 wrapType;\\n    bytes wrapPrefix;\\n    bytes wrapSuffix;\\n    bytes scriptContent;\\n}\\n\\nstruct InlineScriptRequest {\\n    string name;\\n    address contractAddress;\\n    bytes contractData;\\n    bytes scriptContent;\\n}\\n\\ninterface IScriptyBuilder {\\n\\n    // =============================================================\\n    //                            ERRORS\\n    // =============================================================\\n\\n    /**\\n     * @notice Error for, Invalid length of requests\\n     */\\n    error InvalidRequestsLength();\\n\\n    // =============================================================\\n    //                      RAW HTML GETTERS\\n    // =============================================================\\n\\n    /**\\n     * @notice Get requested scripts housed in <body> with custom wrappers\\n     * @dev Your requested scripts are returned in the following format:\\n     *      <html>\\n     *          <head></head>\\n     *          <body style='margin:0;'>\\n     *              [wrapPrefix[0]]{request[0]}[wrapSuffix[0]]\\n     *              [wrapPrefix[1]]{request[1]}[wrapSuffix[1]]\\n     *              ...\\n     *              [wrapPrefix[n]]{request[n]}[wrapSuffix[n]]\\n     *          </body>\\n     *      </html>\\n     * @param requests - Array of WrappedScriptRequests\\n     * @param bufferSize - Total buffer size of all requested scripts\\n     * @return Full html wrapped scripts\\n     */\\n    function getHTMLWrapped(\\n        WrappedScriptRequest[] calldata requests,\\n        uint256 bufferSize\\n    ) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Get requested scripts housed in URL Safe wrappers\\n     * @dev Any wrapper type 0 scripts are converted to base64 and wrapped\\n     *      with <script src=\\\"data:text/javascript;base64,[SCRIPT]\\\"></script>\\n     *\\n     *      [WARNING]: Large non-base64 libraries that need base64 encoding\\n     *      carry a high risk of causing a gas out. Highly advised to use\\n     *      base64 encoded scripts where possible\\n     *\\n     *      Your requested scripts are returned in the following format:\\n     *      <html>\\n     *          <head></head>\\n     *          <body style='margin:0;'>\\n     *              [wrapPrefix[0]]{request[0]}[wrapSuffix[0]]\\n     *              [wrapPrefix[1]]{request[1]}[wrapSuffix[1]]\\n     *              ...\\n     *              [wrapPrefix[n]]{request[n]}[wrapSuffix[n]]\\n     *          </body>\\n     *      </html>\\n     * @param requests - Array of WrappedScriptRequests\\n     * @param bufferSize - Total buffer size of all requested scripts\\n     * @return Full URL Safe wrapped scripts\\n     */\\n    function getHTMLWrappedURLSafe(\\n        WrappedScriptRequest[] calldata requests,\\n        uint256 bufferSize\\n    ) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Get requested scripts housed in <body> all wrapped in <script></script>\\n     * @dev Your requested scripts are returned in the following format:\\n     *      <html>\\n     *          <head></head>\\n     *          <body style='margin:0;'>\\n     *              <script>\\n     *                  {request[0]}\\n     *                  {request[1]}\\n     *                  ...\\n     *                  {request[n]}\\n     *              </script>\\n     *          </body>\\n     *      </html>\\n     * @param requests - Array of InlineScriptRequest\\n     * @param bufferSize - Total buffer size of all requested scripts\\n     * @return Full html wrapped scripts\\n     */\\n    function getHTMLInline(\\n        InlineScriptRequest[] calldata requests,\\n        uint256 bufferSize\\n    ) external view returns (bytes memory);\\n\\n    // =============================================================\\n    //                      ENCODED HTML GETTERS\\n    // =============================================================\\n\\n    /**\\n     * @notice Get {getHTMLWrapped} and base64 encode it\\n     * @param requests - Array of WrappedScriptRequests\\n     * @param bufferSize - Total buffer size of all requested scripts\\n     * @return Full html wrapped scripts, base64 encoded\\n     */\\n    function getEncodedHTMLWrapped(\\n        WrappedScriptRequest[] calldata requests,\\n        uint256 bufferSize\\n    ) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Get {getHTMLInline} and base64 encode it\\n     * @param requests - Array of InlineScriptRequests\\n     * @param bufferSize - Total buffer size of all requested scripts\\n     * @return Full html wrapped scripts, base64 encoded\\n     */\\n    function getEncodedHTMLInline(\\n        InlineScriptRequest[] calldata requests,\\n        uint256 bufferSize\\n    ) external view returns (bytes memory);\\n\\n    // =============================================================\\n    //                      STRING UTILITIES\\n    // =============================================================\\n\\n    /**\\n     * @notice Convert {getHTMLWrapped} output to a string\\n     * @param requests - Array of WrappedScriptRequests\\n     * @param bufferSize - Total buffer size of all requested scripts\\n     * @return {getHTMLWrapped} as a string\\n     */\\n    function getHTMLWrappedString(\\n        WrappedScriptRequest[] calldata requests,\\n        uint256 bufferSize\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Convert {getHTMLInline} output to a string\\n     * @param requests - Array of InlineScriptRequests\\n     * @param bufferSize - Total buffer size of all requested scripts\\n     * @return {getHTMLInline} as a string\\n     */\\n    function getHTMLInlineString(\\n        InlineScriptRequest[] calldata requests,\\n        uint256 bufferSize\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Convert {getEncodedHTMLWrapped} output to a string\\n     * @param requests - Array of WrappedScriptRequests\\n     * @param bufferSize - Total buffer size of all requested scripts\\n     *                     before encoding.\\n     * @return {getEncodedHTMLWrapped} as a string\\n     */\\n    function getEncodedHTMLWrappedString(\\n        WrappedScriptRequest[] calldata requests,\\n        uint256 bufferSize\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Convert {getEncodedHTMLInline} output to a string\\n     * @param requests - Array of InlineScriptRequests\\n     * @param bufferSize - Total buffer size of all requested scripts\\n     *                     before encoding.\\n     * @return {getEncodedHTMLInline} as a string\\n     */\\n    function getEncodedHTMLInlineString(\\n        InlineScriptRequest[] calldata requests,\\n        uint256 bufferSize\\n    ) external view returns (string memory);\\n\\n    // =============================================================\\n    //                      OFF-CHAIN UTILITIES\\n    // =============================================================\\n\\n    /**\\n     * @notice Get the buffer size of a single inline requested code\\n     * @param request - InlineScriptRequest data for code\\n     * @return Buffer size as an unit256\\n     */\\n    function getInlineScriptSize(InlineScriptRequest memory request)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the buffer size of a single wrapped requested code\\n     * @param request - WrappedScriptRequest data for code\\n     * @return Buffer size as an unit256\\n     */\\n    function getWrappedScriptSize(WrappedScriptRequest memory request)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the buffer size of a single wrapped requested code\\n     * @dev If the script is of wrapper type 0, we get buffer size for\\n     *      base64 encoded version.\\n     * @param request - WrappedScriptRequest data for code\\n     * @return Buffer size as an unit256\\n     */\\n    function getURLSafeWrappedScriptSize(WrappedScriptRequest memory request)\\n    external\\n    view\\n    returns (uint256);\\n\\n    /**\\n     * @notice Get the buffer size of an array of html wrapped inline scripts\\n     * @param requests - InlineScriptRequests data for code\\n     * @return Buffer size as an unit256\\n     */\\n    function getBufferSizeForHTMLInline(InlineScriptRequest[] calldata requests)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the buffer size of an array of html wrapped, wrapped scripts\\n     * @param requests - WrappedScriptRequests data for code\\n     * @return Buffer size as an unit256\\n     */\\n    function getBufferSizeForHTMLWrapped(\\n        WrappedScriptRequest[] calldata requests\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the buffer size of an array of URL safe html wrapped scripts\\n     * @param requests - WrappedScriptRequests data for code\\n     * @return Buffer size as an unit256\\n     */\\n    function getBufferSizeForURLSafeHTMLWrapped(\\n        WrappedScriptRequest[] calldata requests\\n    ) external view returns (uint256);\\n    \\n    /**\\n     * @notice Get the buffer size for encoded HTML inline scripts\\n     * @param requests - InlineScriptRequests data for code\\n     * @return Buffer size as an unit256\\n     */\\n    function getBufferSizeForEncodedHTMLInline(\\n        InlineScriptRequest[] calldata requests\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the buffer size for encoded HTML inline scripts\\n     * @param requests - InlineScriptRequests data for code\\n     * @return Buffer size as an unit256\\n     */\\n    function getBufferSizeForEncodedHTMLWrapped(\\n        WrappedScriptRequest[] calldata requests\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2fff62123a05638ef5b190acdd1b3e76d960aa4e005cf2368f1b58052636f9c6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "$5187c88d6fd7cbb2d86814aea483adb806$__630d56fe878a60a001516040518263ffffffff1660e01b81526004016112989190613ae3565b600060405180830381865af41580156112b5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112de9190613b9f565b61280b565b6040516020016112f896959493929190613c96565b6040516020818303038152906040529050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611375576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b6113ce61257a565b6113d86000612837565b565b6113e2612e3a565b60007f0000000000000000000000000000000000000000000000000000000000000000836114109190613d86565b9050611457816040518060400160405280600481526020017f73656564000000000000000000000000000000000000000000000000000000008152506001620f42406128fd565b8260000181815250506114a36040518060400160405280600481526020017f7365656400000000000000000000000000000000000000000000000000000000815250836000015161296d565b8260e001516000600781106114bb576114ba613dba565b5b6020020181905250611506816040518060400160405280600a81526020017f706c616e657453697a6500000000000000000000000000000000000000000000815250601e60646128fd565b8260200181815250506115526040518060400160405280600a81526020017f706c616e657453697a6500000000000000000000000000000000000000000000815250836020015161296d565b8260e0015160016007811061156a57611569613dba565b5b602002018190525060046115b7826040518060400160405280600a81526020017f706c616e657454797065000000000000000000000000000000000000000000008152506000600a6128fd565b106115c35760016115c6565b60005b826080019060018111156115dd576115dc6135f6565b5b908160018111156115f1576115f06135f6565b5b8152505061164a6040518060400160405280600a81526020017f706c616e6574547970650000000000000000000000000000000000000000000081525083608001516001811115611645576116446135f6565b5b61296d565b8260e0015160046007811061166257611661613dba565b5b60200201819052506000600181111561167e5761167d6135f6565b5b82608001516001811115611695576116946135f6565b5b1480156116e4575060036116e2826040518060400160405280600881526020017f68617352696e67730000000000000000000000000000000000000000000000008152506000600a6128fd565b105b8260400190151590811515815250506117476040518060400160405280600881526020017f68617352696e6773000000000000000000000000000000000000000000000000815250836040015161173c57600061173f565b60015b60ff1661296d565b8260e0015160026007811061175f5761175e613dba565b5b602002018190525060006117ac826040518060400160405280600881526020017f6e756d4d6f6f6e73000000000000000000000000000000000000000000000000815250600060646128fd565b905060198110156117c7576001836060018181525050611807565b60258110156117e0576002836060018181525050611806565b60288110156117f9576003836060018181525050611805565b60008360600181815250505b5b5b61184a6040518060400160405280600881526020017f6e756d4d6f6f6e73000000000000000000000000000000000000000000000000815250846060015161296d565b8360e0015160036007811061186257611861613dba565b5b6020020181905250506118af816040518060400160405280600781526020017f626173654875650000000000000000000000000000000000000000000000000081525060006101686128fd565b8260a00181815250506118fb6040518060400160405280600781526020017f62617365487565000000000000000000000000000000000000000000000000008152508360a0015161296d565b8260e0015160056007811061191357611912613dba565b5b602002018190525060018081111561192e5761192d6135f6565b5b82608001516001811115611945576119446135f6565b5b14801561199457506003611992826040518060400160405280600881526020017f68617357617465720000000000000000000000000000000000000000000000008152506000600a6128fd565b105b8260c00190151590811515815250506119f76040518060400160405280600881526020017f68617357617465720000000000000000000000000000000000000000000000008152508360c001516119ec5760006119ef565b60015b60ff1661296d565b8260e00151600660078110611a0f57611a0e613dba565b5b602002018190525050919050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611a4f61257a565b80600b8190555050565b606060038054611a6890613aa3565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9490613aa3565b8015611ae15780601f10611ab657610100808354040283529160200191611ae1565b820191906000526020600020905b815481529060010190602001808311611ac457829003601f168201915b5050505050905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b600c60009054906101000a900460ff16611b5d576040517f589ed34b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081611b87611dfa565b611b919190613d86565b1115611bc9576040517f52df9fe500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600b54611bd79190613de9565b341015611c10576040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c1a33826129a1565b80600b54611c289190613de9565b341115611cec5760003373ffffffffffffffffffffffffffffffffffffffff1682600b54611c569190613de9565b34611c619190613e2b565b604051611c6d90613e90565b60006040518083038185875af1925050503d8060008114611caa576040519150601f19603f3d011682016040523d82523d6000602084013e611caf565b606091505b5050905080611cea576040517ff0c49d4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b50565b8060076000611cfc612569565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611da9612569565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611dee9190612f76565b60405180910390a35050565b6000611e04612b5c565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b611e3561257a565b600c60019054906101000a900460ff1615611e7c576040517f6823b07300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060611fba8260e00151600060078110611edd57611edc613dba565b5b60200201518360e00151600160078110611efa57611ef9613dba565b5b60200201518460e00151600260078110611f1757611f16613dba565b5b60200201518560e00151600360078110611f3457611f33613dba565b5b60200201518660e00151600460078110611f5157611f50613dba565b5b60200201518760e00151600560078110611f6e57611f6d613dba565b5b60200201518860e00151600660078110611f8b57611f8a613dba565b5b6020020151604051602001611fa69796959493929190613ed6565b604051602081830303815290604052612b6f565b9050919050565b600c60019054906101000a900460ff1681565b611fdf848484610b67565b60008373ffffffffffffffffffffffffffffffffffffffff163b146120415761200a84848484612b84565b612040576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b61204f61257a565b7f0000000000000000000000000000000000000000000000000000000000000000818484905061207f9190613de9565b612087611dfa565b6120919190613d86565b11156120c9576040517f52df9fe500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8383905081101561211b576121088484838181106120ed576120ec613dba565b5b905060200201602081019061210291906135ab565b836129a1565b808061211390613f3b565b9150506120cc565b50505050565b606061212c8261250a565b612162576040517feb7d192800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061216d836113da565b9050600061217a82610f3b565b9050600061218783611ec0565b90506000612234600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c7d3625b866040518263ffffffff1660e01b81526004016121e99190613828565b600060405180830381865afa158015612206573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061222f9190613ff3565b612b6f565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf471ba7846040518263ffffffff1660e01b815260040161229391906138d4565b600060405180830381865afa1580156122b0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122d99190613ff3565b905060006122e68861278e565b8383876040516020016122fc94939291906142e8565b60405160208183030381529060405290508060405160200161231e91906143ca565b6040516020818303038152906040529650505050505050919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61236861257a565b600c60019054906101000a900460ff16156123af576040517f6823b07300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61248f61257a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036124fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124f59061445e565b60405180910390fd5b61250781612837565b50565b600081612515612571565b11158015612524575060005482105b8015612562575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b60006001905090565b612582612cd4565b73ffffffffffffffffffffffffffffffffffffffff166125a0611a1d565b73ffffffffffffffffffffffffffffffffffffffff16146125f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ed906144ca565b60405180910390fd5b565b60008082905080612607612571565b1161268d5760005481101561268c5760006004600083815260200190815260200160002054905060007c010000000000000000000000000000000000000000000000000000000082160361268a575b60008103612680576004600083600190039350838152602001908152602001600020549050612656565b80925050506126bf565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e861274c868684612cdc565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b60606080604051019050602081016040526000815280600019835b6001156127ca578184019350600a81066030018453600a81049050806127a9575b50828203602084039350808452505050919050565b606082826040516020016127f492919061455c565b604051602081830303815290604052905092915050565b606082826040516020016128209291906145f9565b604051602081830303815290604052905092915050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806129328561290d8861278e565b60405160200161291e92919061464a565b604051602081830303815290604052612ce5565b905083600185856129439190613e2b565b61294d9190613d86565b82612958919061469d565b6129629190613d86565b915050949350505050565b6060826129798361278e565b60405160200161298a9291906147b2565b604051602081830303815290604052905092915050565b600080549050600082036129e1576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6129ee600084838561272f565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550612a6583612a566000866000612735565b612a5f85612d19565b1761275d565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b818114612b0657808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600181019050612acb565b5060008203612b41576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000819055505050612b576000848385612788565b505050565b6000612b66612571565b60005403905090565b6060612b7d82600080612d29565b9050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612baa612569565b8786866040518563ffffffff1660e01b8152600401612bcc94939291906147f7565b6020604051808303816000875af1925050508015612c0857506040513d601f19601f82011682018060405250810190612c059190614858565b60015b612c81573d8060008114612c38576040519150601f19603f3d011682016040523d82523d6000602084013e612c3d565b606091505b506000815103612c79576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b600033905090565b60009392505050565b6000612d0f82604051602001612cfb9190614885565b604051602081830303815290604052612e2a565b60001c9050919050565b60006001821460e11b9050919050565b606083518015612e22576003600282010460021b60405192507f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526102308515027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f03603f52602083018181015b600115612def576003880197508751603f8160121c1651600053603f81600c1c1651600153603f8160061c1651600253603f8116516003536000518352600483019250818310612de95750612def565b50612d99565b601f19601f82011660405260038406600204613d3d60f01b81840352808715150290506000818403528084038652505050505b509392505050565b6000815160208301209050919050565b60405180610100016040528060008152602001600081526020016000151581526020016000815260200160006001811115612e7857612e776135f6565b5b815260200160008152602001600015158152602001612e95612e9b565b81525090565b6040518060e001604052806007905b6060815260200190600190039081612eaa5790505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612f0b81612ed6565b8114612f1657600080fd5b50565b600081359050612f2881612f02565b92915050565b600060208284031215612f4457612f43612ecc565b5b6000612f5284828501612f19565b91505092915050565b60008115159050919050565b612f7081612f5b565b82525050565b6000602082019050612f8b6000830184612f67565b92915050565b6000819050919050565b612fa481612f91565b82525050565b6000602082019050612fbf6000830184612f9b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612fff578082015181840152602081019050612fe4565b60008484015250505050565b6000601f19601f8301169050919050565b600061302782612fc5565b6130318185612fd0565b9350613041818560208601612fe1565b61304a8161300b565b840191505092915050565b6000602082019050818103600083015261306f818461301c565b905092915050565b61308081612f91565b811461308b57600080fd5b50565b60008135905061309d81613077565b92915050565b6000602082840312156130b9576130b8612ecc565b5b60006130c78482850161308e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006130fb826130d0565b9050919050565b61310b816130f0565b82525050565b60006020820190506131266000830184613102565b92915050565b613135816130f0565b811461314057600080fd5b50565b6000813590506131528161312c565b92915050565b6000806040838503121561316f5761316e612ecc565b5b600061317d85828601613143565b925050602061318e8582860161308e565b9150509250929050565b6131a181612f5b565b81146131ac57600080fd5b50565b6000813590506131be81613198565b92915050565b6000602082840312156131da576131d9612ecc565b5b60006131e8848285016131af565b91505092915050565b60008060006060848603121561320a57613209612ecc565b5b600061321886828701613143565b935050602061322986828701613143565b925050604061323a8682870161308e565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132818261300b565b810181811067ffffffffffffffff821117156132a05761329f613249565b5b80604052505050565b60006132b3612ec2565b90506132bf8282613278565b919050565b600080fd5b600281106132d657600080fd5b50565b6000813590506132e8816132c9565b92915050565b600080fd5b600067ffffffffffffffff82111561330e5761330d613249565b5b602082029050919050565b600080fd5b600080fd5b600067ffffffffffffffff82111561333e5761333d613249565b5b6133478261300b565b9050602081019050919050565b82818337600083830152505050565b600061337661337184613323565b6132a9565b9050828152602081018484840111156133925761339161331e565b5b61339d848285613354565b509392505050565b600082601f8301126133ba576133b96132ee565b5b81356133ca848260208601613363565b91505092915050565b60006133e66133e1846132f3565b6132a9565b90508060208402830185811115613400576133ff613319565b5b835b8181101561344757803567ffffffffffffffff811115613425576134246132ee565b5b80860161343289826133a5565b85526020850194505050602081019050613402565b5050509392505050565b600082601f830112613466576134656132ee565b5b60076134738482856133d3565b91505092915050565b6000610100828403121561349357613492613244565b5b61349e6101006132a9565b905060006134ae8482850161308e565b60008301525060206134c28482850161308e565b60208301525060406134d6848285016131af565b60408301525060606134ea8482850161308e565b60608301525060806134fe848285016132d9565b60808301525060a06135128482850161308e565b60a08301525060c0613526848285016131af565b60c08301525060e082013567ffffffffffffffff81111561354a576135496132c4565b5b61355684828501613451565b60e08301525092915050565b60006020828403121561357857613577612ecc565b5b600082013567ffffffffffffffff81111561359657613595612ed1565b5b6135a28482850161347c565b91505092915050565b6000602082840312156135c1576135c0612ecc565b5b60006135cf84828501613143565b91505092915050565b6135e181612f91565b82525050565b6135f081612f5b565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110613636576136356135f6565b5b50565b600081905061364782613625565b919050565b600061365782613639565b9050919050565b6136678161364c565b82525050565b600060079050919050565b600081905092915050565b6000819050919050565b600081519050919050565b600082825260208201905092915050565b60006136b48261368d565b6136be8185613698565b93506136ce818560208601612fe1565b6136d78161300b565b840191505092915050565b60006136ee83836136a9565b905092915050565b6000602082019050919050565b600061370e8261366d565b6137188185613678565b93508360208202850161372a85613683565b8060005b85811015613766578484038952815161374785826136e2565b9450613752836136f6565b925060208a0199505060018101905061372e565b50829750879550505050505092915050565b60006101008301600083015161379160008601826135d8565b5060208301516137a460208601826135d8565b5060408301516137b760408601826135e7565b5060608301516137ca60608601826135d8565b5060808301516137dd608086018261365e565b5060a08301516137f060a08601826135d8565b5060c083015161380360c08601826135e7565b5060e083015184820360e086015261381b8282613703565b9150508091505092915050565b600060208201905081810360008301526138428184613778565b905092915050565b6000806040838503121561386157613860612ecc565b5b600061386f85828601613143565b9250506020613880858286016131af565b9150509250929050565b600082825260208201905092915050565b60006138a68261368d565b6138b0818561388a565b93506138c0818560208601612fe1565b6138c98161300b565b840191505092915050565b600060208201905081810360008301526138ee818461389b565b905092915050565b600080600080608085870312156139105761390f612ecc565b5b600061391e87828801613143565b945050602061392f87828801613143565b93505060406139408782880161308e565b925050606085013567ffffffffffffffff81111561396157613960612ed1565b5b61396d878288016133a5565b91505092959194509250565b600080fd5b60008083601f840112613994576139936132ee565b5b8235905067ffffffffffffffff8111156139b1576139b0613979565b5b6020830191508360208202830111156139cd576139cc613319565b5b9250929050565b6000806000604084860312156139ed576139ec612ecc565b5b600084013567ffffffffffffffff811115613a0b57613a0a612ed1565b5b613a178682870161397e565b93509350506020613a2a8682870161308e565b9150509250925092565b60008060408385031215613a4b57613a4a612ecc565b5b6000613a5985828601613143565b9250506020613a6a85828601613143565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613abb57607f821691505b602082108103613ace57613acd613a74565b5b50919050565b613add81612f91565b82525050565b6000602082019050613af86000830184613ad4565b92915050565b600067ffffffffffffffff821115613b1957613b18613249565b5b613b228261300b565b9050602081019050919050565b6000613b42613b3d84613afe565b6132a9565b905082815260208101848484011115613b5e57613b5d61331e565b5b613b69848285612fe1565b509392505050565b600082601f830112613b8657613b856132ee565b5b8151613b96848260208601613b2f565b91505092915050565b600060208284031215613bb557613bb4612ecc565b5b600082015167ffffffffffffffff811115613bd357613bd2612ed1565b5b613bdf84828501613b71565b91505092915050565b7f2261747472696275746573223a205b0000000000000000000000000000000000815250565b600081905092915050565b6000613c2482612fc5565b613c2e8185613c0e565b9350613c3e818560208601612fe1565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b7f5d00000000000000000000000000000000000000000000000000000000000000815250565b6000613ca182613be8565b600f82019150613cb18289613c19565b9150613cbc82613c4a565b600182019150613ccc8288613c19565b9150613cd782613c4a565b600182019150613ce78287613c19565b9150613cf282613c4a565b600182019150613d028286613c19565b9150613d0d82613c4a565b600182019150613d1d8285613c19565b9150613d2882613c4a565b600182019150613d388284613c19565b9150613d4382613c70565b600182019150819050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d9182612f91565b9150613d9c83612f91565b9250828201905080821115613db457613db3613d57565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613df482612f91565b9150613dff83612f91565b9250828202613e0d81612f91565b91508282048414831517613e2457613e23613d57565b5b5092915050565b6000613e3682612f91565b9150613e4183612f91565b9250828203905081811115613e5957613e58613d57565b5b92915050565b600081905092915050565b50565b6000613e7a600083613e5f565b9150613e8582613e6a565b600082019050919050565b6000613e9b82613e6d565b9150819050919050565b6000613eb08261368d565b613eba8185613e5f565b9350613eca818560208601612fe1565b80840191505092915050565b6000613ee2828a613ea5565b9150613eee8289613ea5565b9150613efa8288613ea5565b9150613f068287613ea5565b9150613f128286613ea5565b9150613f1e8285613ea5565b9150613f2a8284613ea5565b915081905098975050505050505050565b6000613f4682612f91565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f7857613f77613d57565b5b600182019050919050565b6000613f96613f9184613323565b6132a9565b905082815260208101848484011115613fb257613fb161331e565b5b613fbd848285612fe1565b509392505050565b600082601f830112613fda57613fd96132ee565b5b8151613fea848260208601613f83565b91505092915050565b60006020828403121561400957614008612ecc565b5b600082015167ffffffffffffffff81111561402757614026612ed1565b5b61403384828501613fc5565b91505092915050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b6000614072600983613c0e565b915061407d8261403c565b600982019050919050565b7f4574686572506c616e6574202300000000000000000000000000000000000000600082015250565b60006140be600d83613c0e565b91506140c982614088565b600d82019050919050565b7f222c20226465736372697074696f6e223a220000000000000000000000000000600082015250565b600061410a601283613c0e565b9150614115826140d4565b601282019050919050565b7f46756c6c79206f6e2d636861696e2c2070726f6365647572616c6c792067656e60008201527f6572617465642c20334420706c616e6574732e00000000000000000000000000602082015250565b600061417c603383613c0e565b915061418782614120565b603382019050919050565b7f222c22696d616765223a22646174613a696d6167652f7376672b786d6c3b626160008201527f736536342c000000000000000000000000000000000000000000000000000000602082015250565b60006141ee602583613c0e565b91506141f982614192565b602582019050919050565b7f222c22616e696d6174696f6e5f75726c223a2200000000000000000000000000600082015250565b600061423a601383613c0e565b915061424582614204565b601382019050919050565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b6000614286600283613c0e565b915061429182614250565b600282019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006142d2600183613c0e565b91506142dd8261429c565b600182019050919050565b60006142f382614065565b91506142fe826140b1565b915061430a8287613c19565b9150614315826140fd565b91506143208261416f565b915061432b826141e1565b91506143378286613c19565b91506143428261422d565b915061434e8285613ea5565b915061435982614279565b91506143658284613c19565b9150614370826142c5565b915081905095945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e2c00000000000000000000600082015250565b60006143b4601683613c0e565b91506143bf8261437e565b601682019050919050565b60006143d5826143a7565b91506143e18284613ea5565b915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614448602683612fd0565b9150614453826143ec565b604082019050919050565b600060208201905081810360008301526144778161443b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006144b4602083612fd0565b91506144bf8261447e565b602082019050919050565b600060208201905081810360008301526144e3816144a7565b9050919050565b7f7b2274726169745f74797065223a220000000000000000000000000000000000815250565b7f222c2276616c7565223a00000000000000000000000000000000000000000000815250565b7f7d00000000000000000000000000000000000000000000000000000000000000815250565b6000614567826144ea565b600f820191506145778285613c19565b915061458282614510565b600a820191506145928284613c19565b915061459d82614536565b6001820191508190509392505050565b7f222c2276616c7565223a22000000000000000000000000000000000000000000815250565b7f227d000000000000000000000000000000000000000000000000000000000000815250565b6000614604826144ea565b600f820191506146148285613c19565b915061461f826145ad565b600b8201915061462f8284613c19565b915061463a826145d3565b6002820191508190509392505050565b60006146568285613c19565b91506146628284613c19565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006146a882612f91565b91506146b383612f91565b9250826146c3576146c261466e565b5b828206905092915050565b7f7661722000000000000000000000000000000000000000000000000000000000600082015250565b6000614704600483613c0e565b915061470f826146ce565b600482019050919050565b7f3d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000614750600183613c0e565b915061475b8261471a565b600182019050919050565b7f3b00000000000000000000000000000000000000000000000000000000000000600082015250565b600061479c600183613c0e565b91506147a782614766565b600182019050919050565b60006147bd826146f7565b91506147c98285613ea5565b91506147d482614743565b91506147e08284613c19565b91506147eb8261478f565b91508190509392505050565b600060808201905061480c6000830187613102565b6148196020830186613102565b6148266040830185612f9b565b8181036060830152614838818461389b565b905095945050505050565b60008151905061485281612f02565b92915050565b60006020828403121561486e5761486d612ecc565b5b600061487c84828501614843565b91505092915050565b60006148918284613c19565b91508190509291505056fea264697066735822122086b5c7449e29e8de509c70ef7a3f2fac4937ae0790460649313afd14a874a0b564736f6c63430008120033",
  "libraries": {
    "utils": "0x0e47A2B3de8c3dC9d7F11952164d73A0c1D9D5aC"
  },
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ConsecutiveTransfer(uint256,uint256,address,address)": {
        "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "airdrop(address[],uint256)": {
        "params": {
          "_quantity": "Quantity of tokens to airdrop to each recipient.",
          "_recipients": "List of recipients to receive the airdrop."
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "buildAttributes((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))": {
        "params": {
          "settings": "- Track settings struct"
        },
        "returns": {
          "attr": "- array as a string"
        }
      },
      "buildSettings(uint256)": {
        "params": {
          "_tokenId": "- Token ID for seed value"
        },
        "returns": {
          "settings": "- All settings as a struct"
        }
      },
      "buildVars((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))": {
        "params": {
          "settings": "- Track settings struct"
        },
        "returns": {
          "vars": "- base64 encoded JS compatible setting variables"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "mint(uint256)": {
        "params": {
          "_quantity": "Quantity of tokens to mint."
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "setMintStatus(bool)": {
        "params": {
          "_state": "- Boolean state for being open or closed."
        }
      },
      "setPrice(uint256)": {
        "details": "Very doubtful this gets used, but good to have",
        "params": {
          "_price": "- The new price."
        }
      },
      "setRendererAddress(address)": {
        "params": {
          "_rendererAddress": "- Address of the renderer contract."
        }
      },
      "setThumbnailAddress(address)": {
        "params": {
          "_thumbnailAddress": "- Address of the thumbnail contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "This depends on      - https://ethfs.xyz/ [stores code libraries]      - https://github.com/intartnft/scripty.sol [builds rendering html and stores code libraries]",
        "params": {
          "_tokenId": "- TokenId to build planet for"
        },
        "returns": {
          "metadata": "- as string"
        }
      },
      "totalMinted()": {
        "returns": {
          "_0": "Total number of minted tokens"
        }
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "airdrop(address[],uint256)": {
        "notice": "Airdrops tokens to a list of recipients. Only callable by the contract owner."
      },
      "buildAttributes((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))": {
        "notice": "Build attributes for metadata"
      },
      "buildSettings(uint256)": {
        "notice": "Build all the settings into a struct"
      },
      "buildVars((uint256,uint256,bool,uint256,uint8,uint256,bool,bytes[7]))": {
        "notice": "Pack and base64 encode JS compatible vars"
      },
      "mint(uint256)": {
        "notice": "Mints new tokens for the caller."
      },
      "setMintStatus(bool)": {
        "notice": "Open or close minting"
      },
      "setPrice(uint256)": {
        "notice": "Update the mint price."
      },
      "setRendererAddress(address)": {
        "notice": "Update renderer contract address"
      },
      "setThumbnailAddress(address)": {
        "notice": "Update thumbnail contract address"
      },
      "tokenURI(uint256)": {
        "notice": "Build the metadata including the full render html for the planet"
      },
      "totalMinted()": {
        "notice": "Retrieve how many tokens have been minted"
      },
      "withdraw()": {
        "notice": "Withdraws the contract's balance. Only callable by the contract owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1801,
        "contract": "contracts/Planets.sol:Planets",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1803,
        "contract": "contracts/Planets.sol:Planets",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1805,
        "contract": "contracts/Planets.sol:Planets",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1807,
        "contract": "contracts/Planets.sol:Planets",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1811,
        "contract": "contracts/Planets.sol:Planets",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1815,
        "contract": "contracts/Planets.sol:Planets",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1820,
        "contract": "contracts/Planets.sol:Planets",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)1733_storage)"
      },
      {
        "astId": 1826,
        "contract": "contracts/Planets.sol:Planets",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/Planets.sol:Planets",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 155,
        "contract": "contracts/Planets.sol:Planets",
        "label": "thumbnailAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 157,
        "contract": "contracts/Planets.sol:Planets",
        "label": "rendererAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 159,
        "contract": "contracts/Planets.sol:Planets",
        "label": "price",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 161,
        "contract": "contracts/Planets.sol:Planets",
        "label": "isOpen",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 163,
        "contract": "contracts/Planets.sol:Planets",
        "label": "finalized",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)1733_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)1733_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenApprovalRef)1733_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 1732,
            "contract": "contracts/Planets.sol:Planets",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}